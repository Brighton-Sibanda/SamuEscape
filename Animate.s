.text.global _start_start://      BRIGHTON SIBANDA / bns4987    (name/netid)// Game features a player that moves in a field that has coins and 3 opponents which may attack it if they collide.// The special features// 1. player's score is calculated as (#of lives left * 3 - 100). Displayed at top right corner and Graded as (SUPERB, GOOD, HANG IN, OR DEAD)' // 2. The opponents dont require user input; instead they move randomly and are quite unpredictable. and they dont have constant velocity// the opponents random movement, becomes more random when the player starts moving or changes direction. // 3. large number of (purple) coins, the only powerup, which the user can use to add on to their score and health. // 4. The player, upon collision with an opponent for at least 2 seconds; changes to look like the opponent. // How to play the game// use the push buttons. 3 -> Move down, 2->MOve up, 1->move right, 0->move left// move and collect (purple) coins (if you want to increase your score (displayed at top right))// move to avoid the opponent characters and avoid collisions (collisions may have big impact on health, score, and your appearance if they last more than 2 seconds so try to retreat)// get to the bottom center (written "Get here") and win the game.// Note. Collisions are lenient sometimes, but not always. The opponents move faster than the character so its fair to at least give the player (up to 5) seconds to run away, after a collision.		// Inital stack	mov sp, #0x800000		ldr r2, =0x0000	bl Clear2VGA       // just refresh to initialize pixel buffer screen		ldr r3, =back_buffer	ldr r2, =0xc1000000   // put back buffer address into address	str r2, [r3]		// INTIALIZE DEFAULT START STATES - NONE FOR ME	ldr r0, =StatusStruct	ldr r1, =pix3	strh r1, [r0, #34]		ldr r0, =StatusStruct	ldr r1, =pix2	strh r1, [r0, #36]		ldr r3, =Extras	mov r1, #60	strh r1, [r3]		inf_loop:		bl ClearTextBuffer // to clear the text buffer		ldr r2, =0x0000	bl ClearVGA       //clear by writing 0x000		// START DRAWING STUFF HERE	ldr r3, =StatusStruct	ldrh r0, [r3, #34]	ldrh r1, [r3, #4]	ldrh r2, [r3, #6]	bl BitBlit		ldr r0, =pix2	ldr r3, =StatusStruct	ldrh r1, [r3, #16]	ldrh r2, [r3, #18]	bl BitBlit		ldr r0, =pix2	ldr r3, =Extras	ldrh r1, [r3, #0]	ldrh r2, [r3, #2]	bl BitBlit       //pix2 2	 	ldr r0, =pix2	ldr r3, =Extras	ldrh r1, [r3, #4]	ldrh r2, [r3, #6]	bl BitBlit    //pix2 3		ldr r0, =CoinStruct	bl DrawCoins			ldr r0, =Trophy	mov r1, #160	mov r2, #210	bl BitBlit		mov r1, #165    mov r2, #179    ldr r3, =GetHereStr    bl DrawStr		mov r1, #195    mov r2, #6    ldr r3, =ScoreStr    bl DrawStr		ldr r0, =StatusStruct	bl DrawScore	// END DRAWING STUFF HERE			// INITIATE SWAP	ldr r1, =front_buffer	mov r0, #0x1	str r0, [r1]		// LOOP UNTIL STATUS = 0	inf:            	    ldr r1, =status_check		ldrb r1, [r1]		cmp r1,#0x04    		beq done2		b inf        done2:           // LOAD INPUTS OR CHANGEMAKERS   ldr r0, =StatusStruct   ldr r1, =0xff200050   ldr r1, [r1]   and r1, r1, #0xf   bl MovePix1         // here handle game over?   ldr r3, =StatusStruct   ldrh r1, [r3, #2]   bl GameStage       // here handle text drawing (tentative)       // remember to draw start or over based of of the two #30 and #32   ldr r0, =StatusStruct   bl DrawAllText      // CHANGE THE STUFF THATS INDEPENDANT OF CHANGEMAKERS   ldr r3, =StatusStruct   ldrh r1, [r3]  // game time   add r1, r1, #1   strh r1, [r3]   ldr r3, =StatusStruct   ldrh r1, [r3, #30]    // display start text   add r1, r1, #1   strh r1, [r3, #30]      // for pix2 changes, 4 boundaries + 2 positions   ldr r3, =StatusStruct   bl MovePix2      ldr r0, =Extras   ldr r3, =StatusStruct   bl MovePix3      ldr r0, =Extras   ldr r3, =StatusStruct   bl MovePix4      // in here handle movement of pix1 based on inputs   // here handle collision and changes associated   ldr r3, =StatusStruct   bl CollisionCheck      ldr r3, =StatusStruct   ldr r2, =Extras   bl CollisionCheck2      ldr r3, =StatusStruct   ldr r2, =Extras   bl CollisionCheck3      bl win_check	   b inf_loop//SPACE FOR ALL ROUTINES DEFINITIONS/ IMPLEMENTATIONSwin_check:    push {r4,r5,r6,r7,r8,r9,r10,r11,lr}		ldr r0, =Extras	mov r6, #160 // x position for door	mov r7, #210  // y position for door			ldr r8, =StatusStruct	ldrh r4, [r8, #4]   //x position for pix1	ldrh r5, [r8, #6]   //y position for pix1			add r8, r4, #25   //right boundary	sub r4, r4, #25   //left boundary		 	add r9, r5, #25   // down boundary	sub r5, r5, #25   // up boundary			cmp r6, r8	bgt resumegame	cmp r6, r4	blt resumegame	cmp r7, r9	bgt resumegame	cmp r7, r5	blt resumegame	mov r1, #160    mov r2, #90    ldr r3, =winStr    bl DrawStr    forever_delay2:	    mov r0, #0		cmp r0, #4		bne forever_delay2	resumegame:	    pop {r4,r5,r6,r7,r8,r9,r10,r11,pc}DrawScore:    // r0 is status struct	push {lr}	ldrh r1, [r0,#2]	cmp r1, #99	bgt star	cmp r1, #50	bgt good	cmp r1, #25	bgt almost_dead		youre_dead:	    mov r1, #201        mov r2, #6        ldr r3, =deadStr        bl DrawStr	    b done_score		almost_dead:	   mov r1, #201       mov r2, #6       ldr r3, =almostStr       bl DrawStr	   b done_score		good:	    mov r1, #201        mov r2, #6        ldr r3, =goodStr        bl DrawStr	    b done_score		star:	    mov r1, #201        mov r2, #6        ldr r3, =starStr        bl DrawStr		done_score:	    pop {pc}	DrawCoins:    //r0 -> coinsstruct	push {r4,r5,r6,r7,r8,r9,r10,r11,lr}	ldr r0, =pix2	ldr r3, =Extras	ldrh r1, [r3, #4]	ldrh r2, [r3, #6]	bl BitBlit    		ldr r10, =CoinStruct	mov r11, #0	draw_coins:	    ldr r0, =Coin		ldrh r1, [r10, r11]		add r11, r11, #2		ldrh r2, [r10, r11]		add r6, r1, #0   // x position for coin		add r7, r2, #0   // y position for coin		bl BitBlit				ldr r8, =StatusStruct		ldrh r4, [r8, #4]   //x position for pix1		ldrh r5, [r8, #6]   //y position for pix1				add r8, r4, #25   //right boundary		sub r4, r4, #25   //left boundary		 		add r9, r5, #25   // down boundary		sub r5, r5, #25   // up boundary				cmp r6, r8		bgt resumedraw		cmp r6, r4		blt resumedraw		cmp r7, r9		bgt resumedraw		cmp r7, r5		blt resumedraw		ldr r7, =0xff00		strh r7, [r10, r11]		ldr r7, =StatusStruct		ldrh r9, [r7, #2]		add r9, r9, #10		strh r9, [r7, #2] 		resumedraw:		cmp r11, #36		bne draw_coins	pop {r4,r5,r6,r7,r8,r9,r10,r11,pc}MovePix1:    // r0 -> StatusStruct    // r1 -> bits 3-0 of inputs        push {r4,r5,r6,r7,r8,r9,r10,r11,lr}        cmp r1, #0xf    beq move_right    cmp r1, #0x1    beq move_left    cmp r1, #0x2    beq move_right    cmp r1, #0x4    beq move_down    cmp r1, #0x8    beq move_up    b done_move_pix1            move_left:        ldrh r2, [r0, #4]        cmp r2, #0        blt done_move_pix1        sub r2, r2, #1        strh r2, [r0, #4]                ldrh r2, [r0, #8]        sub r2, r2, #1        strh r2, [r0, #8]                ldrh r2, [r0, #10]        sub r2, r2, #1        strh r2, [r0, #10]        b done_move_pix1    move_right:        ldrh r2, [r0, #4]        mov r11, #255        add r11, r11, #64        cmp r2, r11        bgt done_move_pix1        add r2, r2, #1        strh r2, [r0, #4]                ldrh r2, [r0, #8]        add r2, r2, #1        strh r2, [r0, #8]                ldrh r2, [r0, #10]        add r2, r2, #1        strh r2, [r0, #10]        b done_move_pix1    move_down:        ldrh r2, [r0, #6]        cmp r2, #0        blt done_move_pix1        sub r2, r2, #1        strh r2, [r0, #6]                ldrh r2, [r0, #12]        sub r2, r2, #1        strh r2, [r0, #12]                ldrh r2, [r0, #14]        sub r2, r2, #1        strh r2, [r0, #14]        b done_move_pix1    move_up:               ldrh r2, [r0, #6]        cmp r2, #239        bgt done_move_pix1        add r2, r2, #1        strh r2, [r0, #6]                ldrh r2, [r0, #12]        add r2, r2, #1        strh r2, [r0, #12]                ldrh r2, [r0, #14]        add r2, r2, #1        strh r2, [r0, #14]                b done_move_pix1        done_move_pix1:        pop {r4,r5,r6,r7,r8,r9,r10,r11,pc}                DrawAllText:    // r0 -> StatusStruct    push {r4,r5,r6,r7,r8,r9,r10,r11,lr}        // draw the game over text    ldr r1, =Extras    ldrh r1, [r1, #28]    cmp r1, #0	beq continue_text	// do something here	ldrh r8, [r0, #32]	cmp r8, #1	bne done_draw_all_text    mov r1, #160    mov r2, #90    ldr r3, =GameOverStr    bl DrawStr	forever_delay:	    mov r0, #0		cmp r0, #4		bne forever_delay        continue_text:    	mov r1, #160        mov r2, #90        ldr r3, =StartStr        bl DrawStr                ldr r2, =0x7f00        lsl r2, r2, #7		add r2, r2, #255        mov r1, #0    	delay_text:    	    add r1, r1, #1    	    sub r11, r2, r1    	    cmp r11, #0    	    bgt delay_text    	    mov r2, #1    	    ldr r1, =Extras    	    strh r2, [r1, #28]    	done_draw_all_text:        pop {r4,r5,r6,r7,r8,r9,r10,r11,pc}    CorruptPix:     // changes the structure of pix 1, to a corrupted one     // half the height of pix1     // offset of 6     // length times width the loop ending     // byte = 0xff00     push {r4,r5,r6,r7,r8,r9,r10,r11,lr}          ldr r0, =StatusStruct     ldr r1, =pix2     strh r1, [r0, #34]	 	 donecorrupt:         pop {r4,r5,r6,r7,r8,r9,r10,r11,pc}     CollisionCheck2:    // r3 -> StatusStruct    // r2 -> Extras            push {r4, r5, r6, r7, r8, r9, r10, r11, lr}        ldrh r0, [r3, #8]    // pix1 left    ldrh r1, [r3, #10]    // pix1 right    ldrh r11, [r3, #14]    // pix1 up    ldrh r4, [r3, #12]    // pix1 down    ldrh r5, [r2, #8]    // pix2 left    ldrh r6, [r2, #10]    // pix2 right    ldrh r7, [r2, #12]    // pix2 up    ldrh r8, [r2, #14]    // pix2 down        sub r9, r6, r0    sub r0, r1, r5   // horizontal check            sub r10, r4,r7    sub r7, r8,r11   // vertical check            ldrh r1, [r3, #34]    ldr r2, =pix2        ldrh r4, [r1]    // pix1 width    ldrh r5, [r1, #2] // pix1 height    ldrh r6, [r2]    // pix2 width    ldrh r8, [r2,#2] // pix2 height        add r4, r4, r6    // x compare val    add r5, r5, r8    // y compare val        mov r11, #0    cmp r9, #0    blt x_continue2    cmp r9, r4 //x     blt collided_x2    x_continue2:    cmp r0, #0    blt y_start2    cmp r0, r4    blt collided_x2    y_start2:    cmp r10, #0    blt y_continue2    cmp r10, r5 //y    blt collided_y2    y_continue2:    cmp r7, #0    blt done_collision2    cmp r7, r5    blt collided_y2    b done_collision2        collided_x2:        add r11, r11, #1        b y_start2    collided_y2:        add r11, r11, #1                done_collision2:        cmp r11, #2        blt donefinal2        ldrh r1, [r3, #2]		cmp r1, #1		blt donefinal2        sub r1, r1, #1        strh r1, [r3, #2]        donefinal2:        pop {r4, r5, r6, r7, r8, r9, r10, r11, pc}   CollisionCheck3:    // r3 -> StatusStruct    // r2 -> Extras            push {r4, r5, r6, r7, r8, r9, r10, r11, lr}        ldrh r0, [r3, #8]    // pix1 left    ldrh r1, [r3, #10]    // pix1 right    ldrh r11, [r3, #14]    // pix1 up        ldrh r4, [r3, #12]    // pix1 down        ldrh r5, [r2, #4]    ldrh r2, [r2, #6]        mov r6, #20   // pix2 width    mov r8, #20 // pix2 height                sub r5, r5, r6   // pix2 left    add r6, r5, r6   // pix2 right    sub r7, r2, r8     // pix2 up    add r8, r2, r8    // pix2 down        sub r9, r6, r0    sub r0, r1, r5   // horizontal check            sub r10, r4,r7    sub r7, r8,r11   // vertical check            ldrh r1, [r3, #34]    ldr r2, =pix2        ldrh r4, [r1]    // pix1 width    ldrh r5, [r1, #2] // pix1 height    ldrh r6, [r2]    // pix2 width    ldrh r8, [r2,#2] // pix2 height        add r4, r4, r6    // x compare val    add r5, r5, r8    // y compare val        mov r11, #0    cmp r9, #0    blt x_continue3    cmp r9, r4 //x     blt collided_x3    x_continue3:    cmp r0, #0    blt y_start3    cmp r0, r4    blt collided_x3    y_start3:    cmp r10, #0    blt y_continue3    cmp r10, r5 //y    blt collided_y3    y_continue3:    cmp r7, #0    blt done_collision3    cmp r7, r5    blt collided_y3    b done_collision3        collided_x3:        add r11, r11, #1        b y_start3    collided_y3:        add r11, r11, #1                done_collision3:        cmp r11, #2        blt donefinal3        ldrh r1, [r3, #2]		cmp r1, #1		blt donefinal3        sub r1, r1, #1        strh r1, [r3, #2]        donefinal3:        pop {r4, r5, r6, r7, r8, r9, r10, r11, pc}   CollisionCheck:    // r3 -> StatusStruct        push {r4, r5, r6, r7, r8, r9, r10, r11, lr}        ldrh r0, [r3, #8]    // pix1 left    ldrh r1, [r3, #10]    // pix1 right    ldrh r2, [r3, #14]    // pix1 up    ldrh r4, [r3, #12]    // pix1 down    ldrh r5, [r3, #20]    // pix2 left    ldrh r6, [r3, #22]    // pix2 right    ldrh r7, [r3, #26]    // pix2 up    ldrh r8, [r3, #24]    // pix2 down        sub r9, r6, r0    sub r0, r1, r5   // horizontal check            sub r10, r4,r7    sub r7, r8,r2   // vertical check            ldrh r1, [r3, #34]        ldrh r4, [r1]    // pix1 width    mov r5, #50 // pix1 height    mov r6, #50    // pix2 width    mov r8, #50 // pix2 height        add r4, r4, r6    // x compare val    add r5, r5, r8    // y compare val        mov r11, #0    cmp r9, #0    blt x_continue    cmp r9, r4 //x     blt collided_x    x_continue:    cmp r0, #0    blt y_start    cmp r0, r4    blt collided_x    y_start:    cmp r10, #0    blt y_continue    cmp r10, r5 //y    blt collided_y    y_continue:    cmp r7, #0    blt done_collision    cmp r7, r5    blt collided_y    b done_collision        collided_x:        add r11, r11, #1        b y_start    collided_y:        add r11, r11, #1                done_collision:        cmp r11, #2        blt donefinal        ldrh r1, [r3, #2]		cmp r1, #1		blt donefinal        sub r1, r1, #1        strh r1, [r3, #2]        donefinal:        pop {r4, r5, r6, r7, r8, r9, r10, r11, pc}GameStage:    // r1 -> hearts of pix1    // r3 -> StatusStruct    push {lr}        cmp r1, #99    bgt done_stage    cmp r1, #1    blt over    cmp r1, #95    blt corrupted_pix	b done_stage        over:        mov r2, #1        strh r2, [r3, #32]        b done_stage        corrupted_pix:        // load necessary items before launching corruption        bl CorruptPix            done_stage:        pop {pc}                    MovePix4:    // r3 = StatusStruct address -> all info you could possibly need    // r0 = Extras struct -> additional info    // pix2 here refers to pix2_3    push {r4,r5,r6,r7,r8,r9,r10,r11,lr}    ldrh r1, [r0, #4]  // x position for pix2    ldrh r2, [r0, #6]  // y position for pix2    ldrh r4, [r3, #4]  // x position for pix1    ldrh r5, [r3, #6]  // y position for pix1        orr r1, r5, r1     orr r2, r2, r4        and r1, r1, #1    and r2, r2, #1		add r1, r1, #2	add r2, r2, #2        // add velocity to pix3 positions... alternate add and subtract     // compare new x and y against boundaries and reverse if over them     // halfbyte in status struct determines if we're adding or subtracting'        ldrh r5, [r0, #4]    ldrh r4, [r0, #6]        ldrh r7, [r0, #16]   // pix 2 left boundary    ldrh r8, [r0, #18]  // pix 2 right boundary    ldrh r9, [r0, #20]  // pix 2 up    ldrh r10, [r0, #22] // pix 2 down        // decide what to do based off of pix2 velocity modifier #28    ldrh r6, [r0, #32] // pix 2 velocity handler    cmp r6, #30    bgt add_all3    b sub_all3 //flipped to oppose the main pix2        add_all3:        add r5, r5, r1        add r4, r4, r2                add r7, r7, r1        add r8, r8, r1        add r9, r9, r2        add r10, r10, r2		cmp r6, #60        blt done_velocity3        mov r11, #40         b done_velocity3    sub_all3:        sub r5, r5, r1        sub r4, r4, r2                sub r7, r7, r1        sub r8, r8, r1        sub r9, r9, r2        sub r10, r10, r2    done_velocity3:        // check validity and correct    cmp r5, #0    blt add_x3    mov r6, #255    add r6, #64    cmp r5, r6    bgt sub_x3    done_x3:    cmp r4, #0    blt add_y3    cmp r4, #239    bgt sub_y3    b done_y3        add_x3:        add r5, r5, #3        add r7, r7, #3        add r8, r8, #3        b done_x3    sub_x3:        sub r5, r5, #3        sub r7, r7, #3        sub r8, r8, #3        b done_x3    add_y3:        add r4, r4, #3        add r9, r7, #3        add r10, r8, #3        b done_y3    sub_y3:        sub r4, r4, #3        sub r9, r7, #3        sub r10, r8, #3            done_y3:    // str r5 and r4 into x and y respectively for pix2    strh r5, [r0, #4]    strh r4, [r0, #6]    // str boundaries as well    strh r7, [r0, #16]   // pix 2 left boundary    strh r8, [r0, #18]  // pix 2 right boundary    strh r9, [r0, #20]  // pix 2 up    strh r10, [r0, #22] // pix 2             // cmp to decide if vel is greater than 3, if true make it zero    ldrh r6, [r0, #32] // pix 2 velocity handler    cmp r11, #40    beq reset_vel3    add r6, r6, #1    strh r6, [r0, #32]    b done_move3    reset_vel3:        mov r1, #0        strh r1, [r0, #32]            done_move3:	    pop {r4,r5,r6,r7,r8,r9,r10,r11,pc}    MovePix3:    // r3 = StatusStruct address -> all info you could possibly need    // r0 = Extras struct -> additional info    // pix2 here refers to pix2_2    push {r4,r5,r6,r7,r8,r9,r10,r11,lr}    ldrh r1, [r0, #0]  // x position for pix2    ldrh r2, [r0, #2]  // y position for pix2    ldrh r4, [r3, #4]  // x position for pix1    ldrh r5, [r3, #6]  // y position for pix1        orr r1, r5, r1     orr r2, r2, r4        and r1, r1, #1    and r2, r2, #1		add r1, r1, #2	add r2, r2, #2        // add velocity to pix3 positions... alternate add and subtract     // compare new x and y against boundaries and reverse if over them     // halfbyte in status struct determines if we're adding or subtracting'        ldrh r5, [r0, #0]    ldrh r4, [r0, #2]        ldrh r7, [r0, #8]   // pix 2 left boundary    ldrh r8, [r0, #10]  // pix 2 right boundary    ldrh r9, [r0, #12]  // pix 2 up    ldrh r10, [r0, #14] // pix 2 down        // decide what to do based off of pix2 velocity modifier #28    ldrh r6, [r0, #30] // pix 2 velocity handler    cmp r6, #30    bgt add_all2    b sub_all2 //flipped to oppose the main pix2        add_all2:        add r5, r5, r1        add r4, r4, r2                add r7, r7, r1        add r8, r8, r1        add r9, r9, r2        add r10, r10, r2		cmp r6, #60        blt done_velocity2        mov r11, #40         b done_velocity2    sub_all2:        sub r5, r5, r1        sub r4, r4, r2                sub r7, r7, r1        sub r8, r8, r1        sub r9, r9, r2        sub r10, r10, r2    done_velocity2:        // check validity and correct    cmp r5, #0    blt add_x2    mov r6, #255    add r6, #64    cmp r5, r6    bgt sub_x2    done_x2:    cmp r4, #0    blt add_y2    cmp r4, #239    bgt sub_y2    b done_y2        add_x2:        add r5, r5, #3        add r7, r7, #3        add r8, r8, #3        b done_x2    sub_x2:        sub r5, r5, #3        sub r7, r7, #3        sub r8, r8, #3        b done_x2    add_y2:        add r4, r4, #3        add r9, r7, #3        add r10, r8, #3        b done_y2    sub_y2:        sub r4, r4, #3        sub r9, r7, #3        sub r10, r8, #3            done_y2:    // str r5 and r4 into x and y respectively for pix2    strh r5, [r0, #0]    strh r4, [r0, #2]    // str boundaries as well    strh r7, [r0, #8]   // pix 2 left boundary    strh r8, [r0, #10]  // pix 2 right boundary    strh r9, [r0, #12]  // pix 2 up    strh r10, [r0, #14] // pix 2             // cmp to decide if vel is greater than 3, if true make it zero    ldrh r6, [r0, #30] // pix 2 velocity handler    cmp r11, #40    beq reset_vel2    add r6, r6, #1    strh r6, [r0, #30]    b done_move2    reset_vel2:        mov r1, #0        strh r1, [r0, #30]            done_move2:	    pop {r4,r5,r6,r7,r8,r9,r10,r11,pc}	MovePix2:    // r3 = StatusStruct address -> all info you could possibly need    push {r4,r5,r6,r7,r8,r9,r10,r11,lr}    ldrh r1, [r3, #16]  // x position for pix2    ldrh r2, [r3, #18]  // y position for pix2    ldrh r4, [r3, #4]  // x position for pix1    ldrh r5, [r3, #6]  // y position for pix1        orr r1, r5, r1     orr r2, r2, r4        and r1, r1, #1    and r2, r2, #1		add r1, r1, #2	add r2, r2, #2        // add velocity to pix2 positions... alternate add and subtract     // compare new x and y against boundaries and reverse if over them     // halfbyte in status struct determines if we're adding or subtracting'        ldrh r5, [r3, #16]    ldrh r4, [r3, #18]        ldrh r7, [r3, #20]   // pix 2 left boundary    ldrh r8, [r3, #22]  // pix 2 right boundary    ldrh r9, [r3, #26]  // pix 2 up    ldrh r10, [r3, #24] // pix 2 down        // decide what to do based off of pix2 velocity modifier #28    ldrh r6, [r3, #28] // pix 2 velocity handler    cmp r6, #30    blt add_all    b sub_all        add_all:        add r5, r5, r1        add r4, r4, r2                add r7, r7, r1        add r8, r8, r1        add r9, r9, r2        add r10, r10, r2        b done_velocity    sub_all:        sub r5, r5, r1        sub r4, r4, r2                sub r7, r7, r1        sub r8, r8, r1        sub r9, r9, r2        sub r10, r10, r2        cmp r6, #60        blt done_velocity        mov r11, #40    // 10 in r11 means we should set pix 28 to zero    done_velocity:        // check validity and correct    cmp r5, #0    blt add_x    mov r6, #255    add r6, #64    cmp r5, r6    bgt sub_x    done_x:    cmp r4, #0    blt add_y    cmp r4, #239    bgt sub_y    b done_y        add_x:        add r5, r5, #3        add r7, r7, #3        add r8, r8, #3        b done_x    sub_x:        sub r5, r5, #3        sub r7, r7, #3        sub r8, r8, #3        b done_x    add_y:        add r4, r4, #3        add r9, r7, #3        add r10, r8, #3        b done_y    sub_y:        sub r4, r4, #3        sub r9, r7, #3        sub r10, r8, #3            done_y:    // str r5 and r4 into x and y respectively for pix2    strh r5, [r3, #16]    strh r4, [r3, #18]    // str boundaries as well    strh r7, [r3, #20]   // pix 2 left boundary    strh r8, [r3, #22]  // pix 2 right boundary    strh r9, [r3, #26]  // pix 2 up    strh r10, [r3, #24] // pix 2             // cmp to decide if vel is greater than 3, if true make it zero    ldrh r6, [r3, #28] // pix 2 velocity handler    cmp r11, #40    beq reset_vel    add r6, r6, #1    strh r6, [r3, #28]    b done_move    reset_vel:        mov r1, #0        strh r1, [r3, #28]            done_move:	    pop {r4,r5,r6,r7,r8,r9,r10,r11,pc}	DupByte:    // this helper function adds a byte to a memory location	// useful for cleartextbuffer	// r0 = address	// r1 = byteVal	// r2 = len    // init    mov r3, #0    b for_cond    for_body:        strb r1, [r0, r3]    // store the byte        // increment        add r3, r3, #1       // increment the length    for_cond:         cmp r3, r2        blt for_body    bx lrClearTextBuffer:    push {lr}		mov r1, #79	mov r2, #59	    and r1, r1, #0x7F     // get 7 bits of x	and r2, r2, #0x3F     // get 6 bits of y	mov r2, r2, LSL #7  // shift y to the left by 7		orr r1, r2, r1 // combine the coordinates, gets the length	mov r0, #TEXT_BUFFER	mov r2, r1   // length into r2	mov r1, #0x20		// arguments for DupByte are ready	bl DupByte	pop {pc}			BitBlit:    //r0 -> pointer to pixmap structure	// r1 -> x position	// r2 -> y position	push {r4,r5,r6,r7,r8,r9,r10,r11,lr}		ldrb r5, [r0, #0]             // this is the width	ldrb r4, [r0, #2]       //this is the height	ldrh r6, [r0, #4]       // this is the transparency		// now to get the starting position and end position	mov r7, r4, LSR #1    // divide by two so that starting is	mov r8, r5, LSR #1    // halfway behind required values	sub r1, r1, r7        //starting x coordinate	sub r2, r2, r8        //starting y coordinate		mov r7, r1	add r0, r0, #6     // only start at pixmap index		//counters are r4 and r5	outerloop:	    cmp r4, #0        // nested for loop to draw by colums	    beq done		mov r10, r5		mov r1, r7	innerloop:	    cmp r10, #0		beq outerloop		// define the location of byte origin		// get x and y		// store using a function.		ldrh r3, [r0]               		cmp r3, r6		beq skip		bl putnum  //use putnum to copy bits into positions		skip:		add r0, r0, #2		sub r10, r10, #1		cmp r10, #0		beq decrement		add r1, r1, #1		b innerloop    decrement:	    sub r4, r4, #1		add r2, r2, #1		b outerloop	done:	    pop {r4,r5,r6,r7,r8,r9,r10,r11,pc}	    	putnum:    // puts a 16-bit number into a memory location    // r3 be the number to put into buffer	// r1 be the x value	// r2 be the y value of position		push {r4,r5,r6,r7,r8,r9,r10,r11,lr}		mov r7, r1	mov r8, r2		//check boundaries	mov r4, #255	add r4, r4, #64	cmp r1, r4	bgt done3	cmp r2, #239	bgt done3	cmp r1, #0	blt done3	cmp r2, #0	blt done3		mov r11, #0x1    lsl r11, r11, #8	orr r11, r11, #0xFF	and r7, r7, r11  //get 9 bits of x	and r8, r8, #0xFF     // get 8 bits of y	mov r8, r8, LSL #9  // shift y to the left by 9	orr r7, r8, r7	mov r7, r7, LSL #1   // add extra zero			ldr r9, =back_buffer   // write into backbuffer	ldr r9, [r9]	add r9, r9, r7		strh r3, [r9]     // store bytes		done3:	    pop {r4,r5,r6,r7,r8,r9,r10,r11,pc}	ClearVGA:	// Blanks the screen	// R2 = COLOR VALUE TO PUT	    //ldr r3, =BACK_BUFFER    // starting address	ldr r3, =back_buffer	ldr r3, [r3]	mov r0, #0             // counterClearVGA_Loop:	mov r1, #0         ClearVGA_RowLoop:    strh r2, [r3, r1]	add r1, r1, #2    cmp r1, #640    blo  ClearVGA_RowLoop	add r3, r3, #1024	add r0, r0, #1	cmp r0, #240	blo ClearVGA_Loop    bx lrClear2VGA:	// Blanks the screen	// R2 = COLOR VALUE TO PUT	    ldr r3, =PIX_BUFFER    // starting address	mov r0, #0             // counterClear2VGA_Loop:	mov r1, #0         Clear2VGA_RowLoop:    strh r2, [r3, r1]	add r1, r1, #2    cmp r1, #640    blo  Clear2VGA_RowLoop	add r3, r3, #1024	add r0, r0, #1	cmp r0, #240	blo Clear2VGA_Loop    bx lrDrawStr:	// sample implementation with pseudo type code	//r1 = x position	//r2 = y-position	//r3 = the string address		push {r8, r9, r10, r11,lr}		and r1, r1, #0x7F     // get 7 bits of x	and r2, r2, #0x3F     // get 6 bits of y	mov r2, r2, LSL #7  // shift y to the left by 7		mov r10, r2, LSR #7	mov r9, r1	mov r11, r1			orr r1, r2, r1 // combine that with charbuf 	orr r1, r1, #TEXT_BUFFER		mov r0, r3	mov r2, #0		loop:	cmp r0, #0	beq donestr		add r8, r9, r2	cmp r8, #79	bgt donestr	cmp r8, #0	blt donestr		add r8, r10, r2	cmp r8, #59	bgt donestr	cmp r8, #0	blt donestr		ldrb r0, [r3, r2]	strb r0, [r1, r2]	add r2, r2, #1	cmp r0, #0	bgt loop	donestr:	    pop {r8, r9, r10, r11,pc}		DrawNum:    //r0 = number to be drawn    //r1 = x-position    //r2 = y - position    //r3 = bytespace to put our ascii intepretation        push {r6,r7,r8,r9,r10,r11,lr}    mov r8, r0 //dividend or remainder		//get the number of digits    mov r7, #10           mov r9, #1	mov r11, #0		cmp r8, #0	bge loop1	mov r11, #1	rsb r8, r8, #0	mov r6, r8    loop1:        cmp r6, #0                beq endnum                   mov r10, r6, asr #31           add r10, r10, #1            add r9, r9, r10             mov r10, r10, lsr #1          add r10, r10, r10, lsl #31          mov r6, r10                 b loop1                 endnum:        mov r6, r9	//number of digits found		    mov r9, #0 //quotient    //sub r10, r0, #1 //offset in memory	mov r10, r6		    getq:        cmp r8, #10        blt doneq        add r9, r9, #1        sub r8, r8, #10        b getq    doneq:        b draw    comeback:        cmp r8, #0        beq donenum        mov r8, r9		mov r9, #0        b getq    draw:	    cmp r8, #0		beq donenum        add r7, r8, #48        strb r7, [r3, r10]		sub r10, r10, #1        b comeback    donenum:	    mov r7, #0        strb r7, [r3, r10]		cmp r11, #1		beq sign		continue2:		cmp r0, #0		beq zero		continue3:		pop {r6,r7,r8, r9, r10,r11,lr}		mov r0, #3		b DrawStr		bx lr    	sign:	    mov r7, #45        sub r3, r3, #1         strb r7, [r3]  		b continue2			zero:	    mov r7, #48        sub r3, r3, #1         strb r7, [r3]  		b continue3		DrawPixel:	// Draws a single pixel at (r0, r1) with color r2	// r0 - x	// r1 - y	// r2 - color	lsl r1, #LOG2_BYTES_PER_ROW	lsl r0, #LOG2_BYTES_PER_PIXEL	add r0, r0, r1	ldr r1, =back_buffer	ldr r1, [r1]	strh r2, [r1, r0]	bx lrDrawStar:	// Draws a single star at (r0, r1) of size r2	// r0 - x center	// r1 - y center	// r2 - size (1,2)		push {r4, r5, r6, r7, lr}	mov r4, r0	mov r5, r1	mov r6, r2	mvn r2, #0	bl DrawPixel	cmp r6, #1	beq DS0		add r0, r4, #0	add r1, r5, #1	mvn r2, #0	bl DrawPixel	add r0, r4, #1	add r1, r5, #0	mvn r2, #0	bl DrawPixel	add r0, r4, #1	add r1, r5, #1	mvn r2, #0	bl DrawPixelDS0:	pop {r4, r5, r6, r7, lr}	bx lr.data// These are addresses for the pixel buffer and text buffer.EQU PIX_BUFFER, 0xc8000000.EQU TEXT_BUFFER, 0xc9000000// These are some useful defines that will help you access structure fields.EQU PIXMAP_WIDTH, 0.EQU PIXMAP_HEIGHT, 2.EQU PIXMAP_TRANSPARENCY, 4.EQU PIXMAP_PIXELDATA, 6.equ WIDTH, 320.equ HEIGHT, 240.equ BUFFER_SIZE, 1024 * 240.equ LOG2_BYTES_PER_ROW, 10.equ LOG2_BYTES_PER_PIXEL, 1.equ PIXBUF, 0xc8000000		// Pixel buffer.equ CHAR_WIDTH, 80.equ CHAR_HEIGHT, 60.equ CHARBUF, 0xc9000000.equ front_buffer, 0xFF203020.equ back_buffer, 0xFF203024.equ status_check, 0xFF20302C// STRINGS COME HEREStartStr:    .string "START GAME"    .align 4GameOverStr:    .string "OVER!!"    .align 4GetHereStr:    .string "Get Here"    .align 4ScoreStr:    .string "Score:"	.align 4	deadStr:    .string "DEAD"	.align 4	almostStr:    .string "HANG IN"	.align 4goodStr:    .string "GOOD"	.align 4starStr:    .string "SUPERB"	.align 4collidedStr:    .string "COLLISION!"	.align 4	winStr:    .string "YOU WIN!"	.align 4// STRINGS END HERE// NUMBER BORROWED SPACES COME HERE.align 2       myData:       .skip 256// NUMBER BORROWED SPACES END HERE // STATUS STRUCT IS HEREStatusStruct:	.hword 0x0, 0x64, 60    //game time and pix1 hearts left	.hword 35, 30, 90, 64,6, 0xff, 200, 230, 0x118, 225  // other status attributes	.hword 175, 0, 0, 0, 0	.align 2// STATUS STRUCT ENDS HERE//EXTRA GAME STRUCT STARTS HEREExtras:    .hword 60, 200, 255	.hword 35, 30, 90, 175,225, 230, 0x118, 6, 64, 0	.hword 0,  0, 0, 0,0, 0, 0, 0, 0, 0	.align 2//EXTRA GAME STRUCT ENDS HERE//coins struct starts hereCoinStruct:    .hword 70, 20, 130	.hword 35, 50, 180 ,225, 200, 190, 6, 300, 60	.hword 120,  120, 120, 40, 160, 50, 0xff00	.align 2//coins struct ends here// PIXELS COME HERETrophy:    .hword 4,4, 0xffff	.hword 0x0040, 0x07E0, 0xF802, 0x001F    .hword 0xF81F, 0x0000, 0xE81F, 0x07E0    .hword 0x07E2, 0xF300, 0x301F, 0xFD1F    .hword 0xF81F, 0x001F, 0x07E0, 0xF850    .align 2	Coin:    .hword 4,4, 0xffff	.hword 0x0000, 0x07E0, 0xF800, 0x001F    .hword 0xF81F, 0x0000, 0xF81F, 0x07E0    .hword 0x07E0, 0xF800, 0x001F, 0xF81F    .hword 0xF81F, 0x001F, 0x07E0, 0xF800    .align 2    .align 2	pix2:	.hword 50, 50, 0x43ae	.hword 0x43ae, 0x438e, 0x438d, 0x43ad, 0x43ad, 0x43ad, 0x43cd, 0x43cd, 0x43cd, 0x43ad	.hword 0x43ad, 0x4bad, 0x4bad, 0x4bad, 0x4bad, 0x4bcd, 0x43ce, 0x4bce, 0x4bce, 0x4bae	.hword 0x4bae, 0x53ce, 0x53ee, 0x53ee, 0x4bed, 0x4bed, 0x4c2e, 0x440d, 0x4bed, 0x540e	.hword 0x53cd, 0x5bce, 0x53ee, 0x4c0e, 0x4c0e, 0x442f, 0x442f, 0x4c2f, 0x4c0f, 0x5410	.hword 0x5410, 0x4c10, 0x4c30, 0x442f, 0x4450, 0x4c2f, 0x4c2f, 0x542f, 0x4c2f, 0x4c2f	.hword 0x438e, 0x438e, 0x43ae, 0x4bee, 0x43ad, 0x438d, 0x4bcd, 0x4bce, 0x438d, 0x4bae	.hword 0x4bae, 0x438d, 0x436d, 0x4b8d, 0x4b8d, 0x434c, 0x436d, 0x436d, 0x4b8d, 0x4b8d	.hword 0x4b8d, 0x538d, 0x53ae, 0x53ee, 0x540f, 0x4c0e, 0x4bee, 0x440e, 0x43ee, 0x4bcd	.hword 0x53ee, 0x53ef, 0x4bee, 0x4c0e, 0x4c2e, 0x442f, 0x442f, 0x4c2f, 0x4c0f, 0x5410	.hword 0x5410, 0x5410, 0x4c30, 0x4c30, 0x4c4f, 0x4c2f, 0x4c2f, 0x542f, 0x4c30, 0x4c30	.hword 0x43ae, 0x438e, 0x3b6d, 0x43ad, 0x4bae, 0x4bad, 0x4bae, 0x4b6d, 0x4b6d, 0x434d	.hword 0x3aab, 0x2208, 0x19a7, 0x19c7, 0x21e8, 0x21e8, 0x2a08, 0x21c7, 0x21c7, 0x21c7	.hword 0x21c7, 0x2a08, 0x3a8a, 0x430c, 0x4b6d, 0x4bae, 0x43ae, 0x4c0f, 0x5430, 0x4c0f	.hword 0x5410, 0x4bef, 0x4bef, 0x4c0f, 0x4c2f, 0x442f, 0x442f, 0x4c0f, 0x4c0f, 0x5410	.hword 0x540f, 0x542f, 0x4c2f, 0x4c4f, 0x4c4f, 0x4c2f, 0x542f, 0x542f, 0x5450, 0x5450	.hword 0x334c, 0x43ae, 0x438d, 0x438d, 0x4bae, 0x4b6d, 0x4b4d, 0x42ec, 0x3229, 0x2187	.hword 0x8c4, 0x883, 0x883, 0x883, 0x883, 0x862, 0x841, 0x862, 0x10a3, 0x10c3	.hword 0x10c3, 0x10c3, 0x10c4, 0x10e4, 0x1145, 0x2a08, 0x32ab, 0x434d, 0x4bef, 0x4bf0	.hword 0x4c10, 0x4c10, 0x4bef, 0x4c0f, 0x4c2f, 0x4c2f, 0x4c2f, 0x4c30, 0x5410, 0x540f	.hword 0x542f, 0x542f, 0x4c4f, 0x4c4f, 0x4c50, 0x4c2f, 0x542f, 0x542f, 0x5450, 0x5450	.hword 0x43ce, 0x43ce, 0x438d, 0x436d, 0x432c, 0x3a8a, 0x29e8, 0x18e5, 0x18a4, 0x1083	.hword 0x1884, 0x28e5, 0x3105, 0x28e4, 0x28e4, 0x3105, 0x30e4, 0x30e4, 0x30e5, 0x28e4	.hword 0x28e4, 0x28e4, 0x20e5, 0x20e5, 0x18c4, 0x10a4, 0x8c4, 0x19a7, 0x434d, 0x5430	.hword 0x4bef, 0x440f, 0x4bf0, 0x4c0f, 0x4c2f, 0x4c4f, 0x4c4f, 0x4c30, 0x5430, 0x542f	.hword 0x542f, 0x544e, 0x544f, 0x544f, 0x5450, 0x5430, 0x542f, 0x5c2f, 0x5450, 0x5450	.hword 0x3b8d, 0x438d, 0x4bce, 0x430c, 0x21c7, 0x1905, 0x2105, 0x20a4, 0x28c5, 0x30e5	.hword 0x3906, 0x4105, 0x38e4, 0x38a4, 0x38c4, 0x4104, 0x38e5, 0x3905, 0x3905, 0x38e5	.hword 0x3905, 0x3926, 0x3926, 0x3106, 0x3105, 0x28e5, 0x20c4, 0x10c4, 0x2a08, 0x53ae	.hword 0x540f, 0x544f, 0x4c10, 0x4c10, 0x4c2f, 0x4c4f, 0x4c2f, 0x4c30, 0x5430, 0x5430	.hword 0x542f, 0x544e, 0x544f, 0x5450, 0x5450, 0x5430, 0x544f, 0x5c4f, 0x5450, 0x5450	.hword 0x43cd, 0x438d, 0x436d, 0x2a29, 0x10e4, 0x18c4, 0x28e6, 0x3106, 0x3906, 0x38e5	.hword 0x38c5, 0x38c5, 0x40e5, 0x4905, 0x48e5, 0x40c4, 0x38c5, 0x38e5, 0x38c5, 0x38c5	.hword 0x38e5, 0x38e5, 0x38e6, 0x38e6, 0x4106, 0x3926, 0x30e5, 0x1883, 0x2125, 0x42ea	.hword 0x540e, 0x4c2e, 0x5410, 0x4c10, 0x4c2f, 0x4c2e, 0x4c2f, 0x4c30, 0x5430, 0x5430	.hword 0x542e, 0x544e, 0x544f, 0x5450, 0x5430, 0x5430, 0x5450, 0x544f, 0x5450, 0x5450	.hword 0x438d, 0x4b8d, 0x3aaa, 0x904, 0x883, 0x2906, 0x30e6, 0x3906, 0x38e6, 0x38e6	.hword 0x38e5, 0x38e5, 0x38c5, 0x40e5, 0x40e5, 0x4105, 0x38e6, 0x38e6, 0x38e6, 0x4107	.hword 0x40e6, 0x38e6, 0x38e6, 0x4106, 0x4106, 0x40e5, 0x38e5, 0x28e4, 0x10a3, 0x21a6	.hword 0x438c, 0x4c0e, 0x5410, 0x4c0f, 0x4c0f, 0x4c2e, 0x4c2f, 0x4c0f, 0x4c10, 0x4c2f	.hword 0x4c2f, 0x4c4e, 0x544f, 0x5450, 0x4c31, 0x4c31, 0x5450, 0x544f, 0x5450, 0x5450	.hword 0x4bad, 0x434c, 0x2a08, 0x8a3, 0x18c5, 0x3107, 0x30c6, 0x38e6, 0x38e6, 0x38e6	.hword 0x38e6, 0x3905, 0x3905, 0x38e5, 0x38e5, 0x38e5, 0x38e6, 0x38c6, 0x4106, 0x38e6	.hword 0x38c5, 0x40e6, 0x38e5, 0x38c5, 0x40e6, 0x40a5, 0x4106, 0x3905, 0x20e4, 0x1104	.hword 0x3b0b, 0x4c0f, 0x4c10, 0x4c0f, 0x4c0e, 0x540e, 0x542f, 0x5430, 0x4c30, 0x4c2f	.hword 0x4c4f, 0x5490, 0x4c4f, 0x4c30, 0x5471, 0x4c31, 0x5471, 0x4c50, 0x5450, 0x5450	.hword 0x4b8d, 0x4b4c, 0x29e8, 0x10a4, 0x2906, 0x30e6, 0x38e6, 0x40e6, 0x40c5, 0x40e5	.hword 0x4105, 0x4145, 0x4966, 0x4165, 0x4125, 0x38e4, 0x4125, 0x4105, 0x4905, 0x4905	.hword 0x4905, 0x4905, 0x4925, 0x4905, 0x40e4, 0x48e5, 0x4906, 0x38e5, 0x28e4, 0x8c3	.hword 0x2a69, 0x4bce, 0x4c0f, 0x540f, 0x542f, 0x542f, 0x542f, 0x542f, 0x4c30, 0x4c50	.hword 0x4c4f, 0x4c4f, 0x5450, 0x5451, 0x5451, 0x4c30, 0x4c50, 0x5471, 0x5450, 0x5450	.hword 0x4b8d, 0x4b6d, 0x2a08, 0x1083, 0x28e5, 0x3906, 0x40c5, 0x40c4, 0x5125, 0x5985	.hword 0x6a07, 0x7268, 0x7288, 0x7267, 0x7227, 0x6a06, 0x69e6, 0x69e6, 0x71e6, 0x71c6	.hword 0x71e6, 0x71e6, 0x7227, 0x7228, 0x6a07, 0x69e7, 0x69c7, 0x4946, 0x3105, 0x10a3	.hword 0x2207, 0x53ce, 0x4c0f, 0x542f, 0x542f, 0x542f, 0x542f, 0x542f, 0x5450, 0x4c70	.hword 0x5470, 0x4c50, 0x5470, 0x5c71, 0x5430, 0x4c30, 0x5450, 0x5471, 0x5470, 0x5470	.hword 0x4bae, 0x4b6d, 0x3249, 0x1083, 0x3105, 0x4126, 0x40c4, 0x5945, 0x7207, 0x8267	.hword 0x8aa7, 0x8aa6, 0x8aa6, 0x8a86, 0x8a86, 0x8a65, 0x8246, 0x8a66, 0x9287, 0x9266	.hword 0x9287, 0x9287, 0x8266, 0x8287, 0x8aa7, 0x8268, 0x8268, 0x6a07, 0x4145, 0x1882	.hword 0x2185, 0x538d, 0x4c2e, 0x542f, 0x5430, 0x5430, 0x540f, 0x542f, 0x544f, 0x4c70	.hword 0x5470, 0x5450, 0x5c71, 0x5c50, 0x542f, 0x544f, 0x5c70, 0x5450, 0x5470, 0x5470	.hword 0x4bce, 0x4b8d, 0x3a69, 0x1083, 0x30e5, 0x40e4, 0x4904, 0x7207, 0x8a87, 0x8aa7	.hword 0x8aa6, 0x8aa5, 0x9285, 0x92a5, 0x9285, 0x9264, 0x92a6, 0x9286, 0x9265, 0x9a45	.hword 0x9a65, 0x9285, 0x8a85, 0x92c6, 0x8ac7, 0x8aa7, 0x8aa8, 0x7a68, 0x5185, 0x20a2	.hword 0x1923, 0x536c, 0x4c4e, 0x542f, 0x5410, 0x5410, 0x5430, 0x542f, 0x544f, 0x4c4f	.hword 0x4c50, 0x5451, 0x5c30, 0x5c2f, 0x5c4e, 0x5c2e, 0x646f, 0x5c4f, 0x5470, 0x5470	.hword 0x438c, 0x4b8d, 0x3248, 0x1082, 0x28c4, 0x38e4, 0x61c7, 0x7a48, 0x7226, 0x7a65	.hword 0x82a5, 0x8ac6, 0x92c6, 0x9ae7, 0x9ae7, 0x9ac7, 0x92c7, 0x9ae7, 0x9a86, 0x9a85	.hword 0x9a65, 0x9264, 0x9ae6, 0x9327, 0x9307, 0x9328, 0x9309, 0x82a9, 0x59e7, 0x28e3	.hword 0x10a2, 0x4aeb, 0x4c6e, 0x4c4f, 0x5410, 0x5410, 0x5430, 0x544f, 0x544f, 0x4c4f	.hword 0x4c30, 0x5430, 0x53ef, 0x538c, 0x6c8e, 0x644d, 0x644e, 0x644f, 0x5490, 0x5490	.hword 0x4bac, 0x4b4b, 0x3227, 0x18c3, 0x28e4, 0x3904, 0x6208, 0x61c6, 0x4902, 0x5142	.hword 0x5983, 0x61c4, 0x6a05, 0x7a67, 0x8aa9, 0x92ea, 0x9b49, 0x9b29, 0xa329, 0xa2e8	.hword 0x9ac7, 0x9ac7, 0x9307, 0x9348, 0x8b07, 0x7ac7, 0x6a26, 0x5964, 0x4104, 0x28e3	.hword 0x882, 0x4acb, 0x4c6d, 0x4c4f, 0x5430, 0x5411, 0x5430, 0x544f, 0x544e, 0x546f	.hword 0x5450, 0x53f0, 0x53ae, 0x3ac8, 0x7cce, 0x7cef, 0x6c6e, 0x6c4f, 0x5470, 0x5470	.hword 0x3b2a, 0x19c5, 0x1103, 0x18c3, 0x3145, 0x4145, 0x6208, 0x59a6, 0x4943, 0x4122	.hword 0x3902, 0x3901, 0x4103, 0x4103, 0x4904, 0x4905, 0x5983, 0x5963, 0x92c8, 0xa34a	.hword 0xab6a, 0xa369, 0x6a03, 0x59c2, 0x4981, 0x4121, 0x4102, 0x40e2, 0x30c3, 0x2904	.hword 0x882, 0x3229, 0x446d, 0x4c4f, 0x5431, 0x5411, 0x5410, 0x542f, 0x546e, 0x546f	.hword 0x5c71, 0x5410, 0x538d, 0x2a05, 0x84ef, 0x9db2, 0x748e, 0x6c2e, 0x5470, 0x5470	.hword 0x31a6, 0x18a1, 0x4984, 0x7226, 0x71e5, 0x5921, 0x69e4, 0x6a87, 0x8bad, 0x7b6c	.hword 0x628a, 0x4166, 0x30e5, 0x30e5, 0x28c4, 0x30e5, 0x40c4, 0x5103, 0x8287, 0xa38a	.hword 0xa38b, 0x930a, 0x4924, 0x3904, 0x3104, 0x3104, 0x30e4, 0x30c3, 0x3145, 0x5acc	.hword 0x1105, 0x326a, 0x542e, 0x542f, 0x4c2f, 0x4c30, 0x544f, 0x542d, 0x544d, 0x5c8f	.hword 0x5490, 0x542f, 0x4aab, 0x4926, 0x9b2c, 0xcd32, 0xad50, 0x74cc, 0x5c6f, 0x5c6f	.hword 0x20c2, 0x3943, 0x6a47, 0x8288, 0x8246, 0x5922, 0x61e5, 0x832a, 0xde78, 0xdeda	.hword 0xad35, 0x4a0a, 0x3126, 0x28c5, 0x28a5, 0x30c5, 0x4945, 0x59c5, 0x82c7, 0xa369	.hword 0xabaa, 0x9b6a, 0x59c6, 0x49c7, 0x41e8, 0x2905, 0x3125, 0x20c4, 0x3126, 0x630e	.hword 0x1967, 0x326b, 0x540e, 0x540f, 0x5430, 0x5451, 0x5430, 0x542f, 0x5c4f, 0x542e	.hword 0x5c4f, 0x4b4c, 0x3987, 0x69a8, 0xa2ab, 0xcc6f, 0xcdb2, 0x9d4e, 0x6c70, 0x642f	.hword 0x20a1, 0x49a5, 0x7288, 0x8288, 0x8267, 0x5922, 0x61a4, 0x8b6c, 0xe6da, 0xe6fc	.hword 0x8433, 0x3168, 0x20c7, 0x20a6, 0x28c6, 0x30e6, 0x6269, 0xb4b0, 0xa3ca, 0xabc9	.hword 0xaba8, 0xa3aa, 0xc512, 0xc5b6, 0x7bd0, 0x2967, 0x2106, 0x20c6, 0x20c6, 0x3188	.hword 0x10e5, 0x4b0d, 0x5c0e, 0x5c30, 0x5410, 0x4c31, 0x4c52, 0x5451, 0x5c51, 0x5c0f	.hword 0x538d, 0x3207, 0x4966, 0x81e9, 0x9a09, 0xa2a9, 0xcd0f, 0xbdaf, 0x84f2, 0x7450	.hword 0x3143, 0x41a5, 0x7288, 0x82c9, 0x8268, 0x6164, 0x5984, 0x832b, 0xe6ba, 0xdebb	.hword 0x5aee, 0x2108, 0x18c7, 0x20c7, 0x28c7, 0x30c6, 0x49c7, 0xc553, 0xac0b, 0xa388	.hword 0xab67, 0xabaa, 0xe5f5, 0xe69a, 0x73b0, 0x2168, 0x18e7, 0x20e8, 0x20c7, 0x20e6	.hword 0x10c5, 0x532d, 0x5c2f, 0x5c70, 0x4c10, 0x4431, 0x4c52, 0x5452, 0x5c31, 0x5bae	.hword 0x4248, 0x3964, 0x7229, 0x920a, 0xa1ea, 0x89a6, 0x9b29, 0xcdf1, 0xadd5, 0x8cb1	.hword 0x3a27, 0x2944, 0x49e6, 0x6248, 0x7227, 0x7a46, 0x7226, 0x8b0a, 0xe658, 0xde7a	.hword 0x62ed, 0x2108, 0x20c7, 0x28e7, 0x28c6, 0x3907, 0x5a29, 0xc554, 0xabec, 0xab89	.hword 0xb389, 0xb3ab, 0xe5b5, 0xe69a, 0x7bb1, 0x2969, 0x2108, 0x20c8, 0x20a7, 0x20c6	.hword 0x1926, 0x532c, 0x544f, 0x542f, 0x4c50, 0x4c71, 0x4451, 0x5432, 0x5bf0, 0x4a8a	.hword 0x3964, 0x61e7, 0x8a4a, 0x920b, 0xa20b, 0x81c8, 0x7267, 0xd654, 0xd6d8, 0xa573	.hword 0x3aa9, 0x1944, 0x1903, 0x28e3, 0x4123, 0x7a66, 0x8266, 0x92e7, 0xddb3, 0xee98	.hword 0x9c92, 0x3147, 0x20e6, 0x20c6, 0x2085, 0x3948, 0x832e, 0xb4b2, 0xa3cc, 0xabca	.hword 0xb38a, 0xb38b, 0xd513, 0xee9a, 0xa4f5, 0x2947, 0x18a6, 0x28e8, 0x28a7, 0x18c6	.hword 0x21a7, 0x53ce, 0x542f, 0x542e, 0x4c4f, 0x4c6f, 0x4c70, 0x5430, 0x4acb, 0x3945	.hword 0x5985, 0x8249, 0x924a, 0x9a0b, 0x9a2c, 0x8a6c, 0xacb1, 0xef7a, 0xdf3a, 0xa573	.hword 0x4b6c, 0x3aca, 0x3a88, 0x39c6, 0x3102, 0x6a25, 0x8aa6, 0x9ac6, 0xb3eb, 0xe5d4	.hword 0xd5d6, 0x62cc, 0x3167, 0x20e6, 0x3967, 0x522a, 0xac31, 0xa3ee, 0x9b8b, 0x9b48	.hword 0x9b08, 0xab8b, 0xb40f, 0xd5d6, 0xce38, 0x6b2d, 0x3146, 0x3106, 0x2084, 0x2126	.hword 0x3aeb, 0x544f, 0x542f, 0x542f, 0x542e, 0x4c2e, 0x546f, 0x4b4b, 0x3185, 0x4924	.hword 0x8208, 0x9a2a, 0x9a2b, 0x920b, 0x8a0b, 0x8acc, 0xde37, 0xe739, 0xdf5a, 0xa593	.hword 0x4bcc, 0x4bac, 0x536c, 0x4aca, 0x2943, 0x5a05, 0x82a6, 0x92a5, 0x9b07, 0xb40b	.hword 0xc511, 0xb4f2, 0x734d, 0x49c7, 0x6aaa, 0x9c10, 0xabee, 0x9bab, 0x82c6, 0x7a64	.hword 0x71e3, 0x82a7, 0x9b8b, 0xac90, 0xc594, 0xb552, 0x7b6c, 0x5a29, 0x28e4, 0x2166	.hword 0x4bef, 0x4c91, 0x5c50, 0x540f, 0x5c4f, 0x5c4e, 0x4bcc, 0x2a26, 0x28e3, 0x69c8	.hword 0x91e9, 0xa22b, 0x9a0a, 0x9a4a, 0x9aab, 0xbc30, 0xf697, 0xff38, 0xd718, 0x9d51	.hword 0x4bed, 0x438c, 0x43ad, 0x434c, 0x31e7, 0x41a4, 0x7a87, 0x8aa6, 0x9285, 0x9b07	.hword 0xa38a, 0xa3cc, 0x93ac, 0x93ac, 0x9bac, 0xa3ac, 0xab8a, 0xa389, 0x9b47, 0x92e5	.hword 0x9b27, 0x9b28, 0xa3ab, 0x9bcb, 0x9beb, 0x9bec, 0x8bab, 0x6aa9, 0x20e3, 0x428a	.hword 0x4bef, 0x4470, 0x5430, 0x540f, 0x5c50, 0x5c4f, 0x4bcd, 0x21e6, 0x20a3, 0x50c5	.hword 0x91ea, 0x9a2b, 0x9a09, 0xa2c9, 0xbc0c, 0xdd50, 0xee12, 0xf694, 0xcef6, 0x950e	.hword 0x3bcd, 0x4c0f, 0x43ef, 0x438e, 0x3aab, 0x3165, 0x6a47, 0x8aa7, 0x9285, 0x9285	.hword 0x9ae7, 0x9b49, 0xa36a, 0xa36a, 0xa349, 0xab29, 0xab69, 0xa368, 0xa347, 0xa347	.hword 0xab68, 0xa328, 0xa349, 0xa369, 0x9b69, 0x8b48, 0x7ac8, 0x4184, 0x20c3, 0x4aec	.hword 0x5410, 0x5471, 0x4c2f, 0x542f, 0x540f, 0x540f, 0x53ee, 0x5b8d, 0x3145, 0x4064	.hword 0x81a9, 0x9a6a, 0xa2ea, 0xb40b, 0xd54d, 0xee30, 0xe610, 0xddd0, 0xb633, 0x84cd	.hword 0x3bad, 0x43ef, 0x3b8e, 0x43af, 0x532e, 0x39c7, 0x4944, 0x8a87, 0x9266, 0x9245	.hword 0x9265, 0x92a6, 0x92c7, 0x92a7, 0x9286, 0x9aa7, 0x8a87, 0x92a7, 0x92a6, 0x8a85	.hword 0x92a6, 0x8a66, 0x8aa7, 0x8aa8, 0x7a66, 0x6a45, 0x4983, 0x20c1, 0x2986, 0x534d	.hword 0x53cf, 0x5c31, 0x540f, 0x438d, 0x53f0, 0x5c10, 0x6c51, 0x5b2c, 0x30e4, 0x48e4	.hword 0x8229, 0x9b0a, 0xc4ae, 0xd5ae, 0xd5ee, 0xd5ee, 0xd5ef, 0xcdb0, 0x7cf0, 0x6c4d	.hword 0x4bee, 0x43ce, 0x4bae, 0x4b2d, 0x52cb, 0x49a6, 0x8aaa, 0xb34b, 0xaaa8, 0x9a46	.hword 0x81c4, 0x6983, 0x71e5, 0x71e6, 0x71c6, 0x71a5, 0x69c6, 0x71c6, 0x71c5, 0x71c4	.hword 0x7a06, 0x71e6, 0x6185, 0x4902, 0x40e2, 0x28c1, 0x18c1, 0x29c6, 0x4b2c, 0x5bcf	.hword 0x5bef, 0x5bcf, 0x3aaa, 0x21c7, 0x532d, 0x636f, 0x4aaa, 0x3985, 0x4944, 0x7a06	.hword 0xa30a, 0xc46d, 0xd5d0, 0xce0f, 0xce2f, 0xce30, 0xb5b0, 0x94ad, 0x644f, 0x5c2f	.hword 0x4bad, 0x4b8d, 0x538d, 0x4aa9, 0x41a6, 0x82a9, 0xcc50, 0xd3ee, 0xaaa8, 0x9a48	.hword 0x7164, 0x4040, 0x3861, 0x3862, 0x4063, 0x4062, 0x3862, 0x4062, 0x4041, 0x4061	.hword 0x3841, 0x3041, 0x3062, 0x2861, 0x1820, 0x18a1, 0x3a27, 0x538d, 0x53ee, 0x53ae	.hword 0x5b8d, 0x3a48, 0x3125, 0x3105, 0x4167, 0x49a8, 0x3925, 0x59c6, 0x8267, 0xa328	.hword 0xd4ad, 0xdd6f, 0xaccc, 0x948a, 0xad90, 0xad91, 0x84cf, 0x6c2d, 0x5c70, 0x5c90	.hword 0x53ce, 0x538d, 0x5b6c, 0x3184, 0x51c5, 0x92ea, 0xb34c, 0xa289, 0xa269, 0x9228	.hword 0x6945, 0x48a3, 0x69c7, 0x7a29, 0x7a29, 0x79e8, 0x7208, 0x71e7, 0x69a6, 0x6186	.hword 0x5124, 0x4946, 0x4967, 0x4105, 0x2062, 0x20c3, 0x3a48, 0x53ce, 0x5c30, 0x536d	.hword 0x4269, 0x3965, 0x71e8, 0x7a09, 0x6188, 0x5987, 0x6a08, 0x7a68, 0xa329, 0xd4cd	.hword 0xe58f, 0xddd0, 0x7366, 0x4244, 0x5329, 0x6c0d, 0x6c6f, 0x648f, 0x546f, 0x5c90	.hword 0x43ae, 0x53cf, 0x42ea, 0x2123, 0x51a5, 0x7a27, 0x8a07, 0x89e8, 0x8187, 0x7986	.hword 0x6104, 0x50c3, 0x8228, 0x92a9, 0xa2ca, 0xb30a, 0xa2ea, 0xa30b, 0x9aca, 0x8208	.hword 0x5104, 0x5166, 0x59a8, 0x4927, 0x2842, 0x2062, 0x2966, 0x4b2c, 0x4b4d, 0x31e8	.hword 0x4166, 0x7a4a, 0x9a4a, 0x920a, 0x8a2a, 0x7a29, 0x7a48, 0x7226, 0xb3ca, 0xdd6e	.hword 0xe5ef, 0xbdae, 0x6347, 0x5b6a, 0x63ce, 0x640f, 0x5c6f, 0x548e, 0x546f, 0x5c70	.hword 0x43f0, 0x438e, 0x4b4d, 0x18e3, 0x3924, 0x6185, 0x6945, 0x7987, 0x7126, 0x60e5	.hword 0x5083, 0x58a2, 0x9267, 0xb2e9, 0xd38a, 0xec2d, 0xdc6e, 0xcbcd, 0xb2ea, 0x8a07	.hword 0x50a3, 0x5105, 0x5968, 0x48e6, 0x3022, 0x2842, 0x1882, 0x31e7, 0x3208, 0x39c7	.hword 0x6a29, 0x8a4a, 0xa20a, 0x9a2a, 0x8a09, 0x79e8, 0x7207, 0xa3ac, 0xd54f, 0xddae	.hword 0xd60f, 0xb5ae, 0x5327, 0x5bcd, 0x6430, 0x5c30, 0x546f, 0x4cad, 0x5c50, 0x5c50	.hword 0x43af, 0x4baf, 0x328a, 0x10c4, 0x2062, 0x3063, 0x48e4, 0x48c4, 0x40a3, 0x3862	.hword 0x3802, 0x6106, 0x7988, 0x81a8, 0x81e8, 0x8229, 0x91ca, 0x89a9, 0x7168, 0x71a8	.hword 0x4883, 0x48c4, 0x50e5, 0x40a4, 0x2821, 0x2041, 0x1041, 0x2104, 0x4208, 0x5229	.hword 0x49a8, 0x6a8b, 0x920c, 0x924b, 0x71e7, 0x6a04, 0x9c08, 0xd5ed, 0xd5ed, 0xdded	.hword 0xcdcf, 0x9cad, 0x52e8, 0x53ad, 0x5c70, 0x4c0f, 0x5c6f, 0x542e, 0x5470, 0x5470	.hword 0x438d, 0x4b8e, 0x2a08, 0x10a2, 0x28a3, 0x3082, 0x3041, 0x3042, 0x38a3, 0x3883	.hword 0x4083, 0x6926, 0x7167, 0x7987, 0x7166, 0x7166, 0x7927, 0x7967, 0x7147, 0x6946	.hword 0x48a4, 0x50c4, 0x48c4, 0x40a3, 0x2842, 0x4166, 0x20a3, 0x1882, 0x2925, 0x49e8	.hword 0x5a2a, 0x4988, 0x71c9, 0x6986, 0x6184, 0xac4c, 0xd5af, 0xddef, 0xde2f, 0xcdae	.hword 0x8c4a, 0x52e7, 0x4b4a, 0x5c70, 0x5430, 0x4c2f, 0x6490, 0x5c4f, 0x5470, 0x5470	.hword 0x4b8d, 0x4b4c, 0x29e6, 0x3185, 0x5207, 0x6a68, 0x61e7, 0x4924, 0x38c3, 0x3062	.hword 0x4083, 0x6126, 0x7146, 0x7986, 0x7966, 0x7985, 0x7146, 0x7187, 0x6946, 0x6125	.hword 0x58e5, 0x50c4, 0x48a4, 0x3862, 0x4925, 0x5a29, 0x3125, 0x1042, 0x20c4, 0x3947	.hword 0x49a8, 0x624b, 0x51a6, 0x4984, 0x93cc, 0xd591, 0xe612, 0xd5f0, 0xb52d, 0x7367	.hword 0x4ac6, 0x4b6a, 0x544f, 0x4c4f, 0x4c70, 0x5c91, 0x5c50, 0x5c2f, 0x5470, 0x5470	.hword 0x536c, 0x4b0a, 0x29a5, 0x39c5, 0x5206, 0x6a68, 0x7289, 0x6a69, 0x4965, 0x3082	.hword 0x40c3, 0x6125, 0x6925, 0x7124, 0x7124, 0x7164, 0x6966, 0x6966, 0x6125, 0x50a4	.hword 0x4884, 0x4043, 0x3843, 0x3022, 0x5146, 0x4966, 0x3904, 0x1842, 0x1822, 0x28c5	.hword 0x30e6, 0x49a9, 0x5ac9, 0x4a25, 0x83ab, 0xc550, 0xd5b1, 0xb4ce, 0x6ae8, 0x4aa7	.hword 0x4b4b, 0x544f, 0x5490, 0x4c70, 0x4c90, 0x4c50, 0x5450, 0x5c50, 0x5470, 0x5470	.hword 0x538d, 0x4aeb, 0x2123, 0x3164, 0x4984, 0x5164, 0x5985, 0x6a27, 0x4103, 0x2040	.hword 0x38c3, 0x5124, 0x5904, 0x6103, 0x6103, 0x6943, 0x5965, 0x5104, 0x48e4, 0x48a4	.hword 0x5126, 0x5147, 0x5146, 0x40c4, 0x3062, 0x40c3, 0x38c3, 0x30c4, 0x30a4, 0x30e5	.hword 0x3106, 0x3127, 0x3a47, 0x5b0a, 0x4a46, 0x83ab, 0x942d, 0x5267, 0x4aa8, 0x536c	.hword 0x542f, 0x5470, 0x4c4f, 0x5490, 0x5470, 0x442e, 0x5490, 0x5470, 0x5470, 0x5470	.hword 0x538f, 0x4acc, 0x2104, 0x4185, 0x69e7, 0x8248, 0x8248, 0x61a5, 0x3060, 0x2861	.hword 0x4985, 0x6a28, 0x7249, 0x7a48, 0x7a28, 0x7227, 0x6248, 0x4966, 0x40e5, 0x3063	.hword 0x40a5, 0x4926, 0x4926, 0x3083, 0x3042, 0x48e4, 0x48e4, 0x5946, 0x4946, 0x28c4	.hword 0x1043, 0x18a4, 0x2186, 0x4249, 0x52a9, 0x39c5, 0x31a5, 0x4289, 0x538d, 0x540f	.hword 0x4c30, 0x5451, 0x5450, 0x542f, 0x544f, 0x546f, 0x4c8f, 0x4c90, 0x5450, 0x5450	.hword 0x4b4f, 0x42ac, 0x2126, 0x4166, 0x69e7, 0xa30b, 0xbbad, 0x8248, 0x3881, 0x2020	.hword 0x2882, 0x2882, 0x3083, 0x3062, 0x3082, 0x2862, 0x2083, 0x1842, 0x2883, 0x2864	.hword 0x2864, 0x2044, 0x2043, 0x2042, 0x38a3, 0x48e4, 0x6186, 0x69c7, 0x59a6, 0x4145	.hword 0x18c3, 0x1904, 0x10e5, 0x2146, 0x426a, 0x52ab, 0x1965, 0x430b, 0x540f, 0x5450	.hword 0x4c50, 0x4c0f, 0x5c50, 0x5c2f, 0x5c2f, 0x544f, 0x4c70, 0x4470, 0x5450, 0x5450	.hword 0x4b8f, 0x430d, 0x2146, 0x3925, 0x69a6, 0x9aaa, 0xbb8d, 0x9aca, 0x5124, 0x3082	.hword 0x2883, 0x2884, 0x30c5, 0x30a5, 0x28c5, 0x20a4, 0x3186, 0x20c4, 0x20c5, 0x3106	.hword 0x30e7, 0x2885, 0x2043, 0x2883, 0x40e4, 0x6186, 0x69a6, 0x69c7, 0x59a6, 0x3924	.hword 0x2124, 0x42cb, 0x29c8, 0x10e5, 0x2146, 0x3208, 0x21c7, 0x4b8d, 0x5450, 0x4c4f	.hword 0x4c4f, 0x542f, 0x5c2f, 0x5bef, 0x5c0f, 0x5c50, 0x5450, 0x4c51, 0x5450, 0x5450	.hword 0x438e, 0x4b4d, 0x29c7, 0x28e3, 0x61a6, 0x71c6, 0x8a28, 0x8a48, 0x69c7, 0x48e4	.hword 0x3063, 0x38e6, 0x38c6, 0x3107, 0x20c6, 0x18e6, 0x428a, 0x2125, 0x20e5, 0x3107	.hword 0x38e7, 0x30c6, 0x2064, 0x2042, 0x3904, 0x59c6, 0x61a6, 0x61c7, 0x4124, 0x2103	.hword 0x3228, 0x5bae, 0x536d, 0x3229, 0x1966, 0x1145, 0x328a, 0x53ef, 0x540f, 0x544f	.hword 0x4c4f, 0x4c4f, 0x542f, 0x5430, 0x5c30, 0x5c11, 0x5c11, 0x5431, 0x5450, 0x5450	.hword 0x438d, 0x4b8d, 0x42ea, 0x2144, 0x4164, 0x61e6, 0x69e7, 0x69a6, 0x6186, 0x40a3	.hword 0x4084, 0x3885, 0x3065, 0x30e7, 0x2927, 0x31e9, 0x532c, 0x29c7, 0x20e5, 0x30c5	.hword 0x38c6, 0x38c5, 0x2863, 0x1001, 0x2061, 0x3103, 0x30e3, 0x28c2, 0x20a2, 0x31e7	.hword 0x536c, 0x53ef, 0x5c0e, 0x4b8d, 0x432c, 0x430c, 0x538f, 0x5c30, 0x540f, 0x542e	.hword 0x4c4e, 0x4c4f, 0x4c4f, 0x4c50, 0x5431, 0x5c11, 0x5c11, 0x5c11, 0x5430, 0x5430	.hword 0x4bae, 0x4bad, 0x4b8d, 0x2a06, 0x1903, 0x28e3, 0x30c3, 0x38c3, 0x3883, 0x40a4	.hword 0x7209, 0x69a8, 0x5106, 0x30a4, 0x18a3, 0x4249, 0x534c, 0x31e7, 0x20c4, 0x38e5	.hword 0x5147, 0x5968, 0x4105, 0x1841, 0x1041, 0x1061, 0x10a2, 0x2985, 0x3a48, 0x4b2c	.hword 0x5bef, 0x4bce, 0x4bed, 0x4bee, 0x4bee, 0x53cf, 0x53f0, 0x53ef, 0x53ee, 0x4c0e	.hword 0x4c4e, 0x4c6f, 0x446f, 0x4c50, 0x4c50, 0x5430, 0x5c10, 0x6410, 0x5430, 0x5430	.hword 0x436d, 0x436d, 0x4bae, 0x436d, 0x3a8a, 0x29a6, 0x3187, 0x41a7, 0x4125, 0x48e4	.hword 0x826a, 0x71e8, 0x69a7, 0x4944, 0x20c2, 0x3a06, 0x3aa9, 0x29c6, 0x28c4, 0x4926	.hword 0x6168, 0x6187, 0x4946, 0x20a3, 0x2104, 0x1944, 0x21a6, 0x42eb, 0x5bcf, 0x53ef	.hword 0x4bef, 0x5410, 0x4c0e, 0x542f, 0x4bef, 0x4bf0, 0x4bf0, 0x4bef, 0x540f, 0x542f	.hword 0x4c4e, 0x4c4f, 0x446f, 0x446f, 0x4c50, 0x544f, 0x542f, 0x5c2f, 0x542f, 0x542f	.hword 0x4b8e, 0x438d, 0x3b6d, 0x438e, 0x4b6e, 0x42ec, 0x52ec, 0x528a, 0x3945, 0x38e3	.hword 0x7a49, 0x6165, 0x5103, 0x38c2, 0x1880, 0x1902, 0x1945, 0x1904, 0x1841, 0x40e4	.hword 0x50e5, 0x48e4, 0x40e4, 0x2082, 0x31c7, 0x42aa, 0x4b2c, 0x538e, 0x53ef, 0x4bef	.hword 0x4bef, 0x4c10, 0x4bef, 0x4c0f, 0x43cf, 0x4410, 0x4c10, 0x4c10, 0x5430, 0x4c0f	.hword 0x542f, 0x4c2f, 0x4c4f, 0x4c4f, 0x4c4f, 0x4c4f, 0x544e, 0x542e, 0x542f, 0x542f	.hword 0x438d, 0x438d, 0x43ae, 0x438e, 0x434e, 0x3acc, 0x3209, 0x2146, 0x18a3, 0x51e7	.hword 0x8b6c, 0x7248, 0x5985, 0x38c3, 0x1861, 0x2103, 0x1945, 0x2105, 0x1862, 0x4146	.hword 0x5987, 0x5986, 0x4986, 0x2904, 0x18e3, 0x21a7, 0x3aab, 0x4b4d, 0x53ef, 0x540f	.hword 0x4c2f, 0x4c2f, 0x4bef, 0x4c10, 0x4bef, 0x4c2f, 0x4c50, 0x4c30, 0x5430, 0x5430	.hword 0x542f, 0x542f, 0x542f, 0x4c2f, 0x4c4f, 0x4c4f, 0x4c4f, 0x4c4f, 0x542f, 0x542f	.hword 0x438c, 0x438c, 0x4bae, 0x436e, 0x328b, 0x21c9, 0x1946, 0x1905, 0x1082, 0x39a5	.hword 0x51e7, 0x4125, 0x4925, 0x30a4, 0x1864, 0x20e6, 0x1905, 0x20e5, 0x1042, 0x30e4	.hword 0x4124, 0x4145, 0x3124, 0x18a2, 0x862, 0x8a3, 0x1946, 0x2a49, 0x4b8e, 0x4bce	.hword 0x43ee, 0x440e, 0x4bf0, 0x4c10, 0x4c0f, 0x4c0e, 0x4c2e, 0x4c0e, 0x4c0f, 0x540f	.hword 0x5410, 0x540f, 0x540f, 0x540f, 0x4c2f, 0x4c2f, 0x4c30, 0x4c30, 0x542f, 0x542f	.hword 0x43ab, 0x3b6b, 0x438d, 0x434d, 0x2209, 0x1126, 0x10e5, 0x10e4, 0x10c3, 0x18c2	.hword 0x1881, 0x2062, 0x2864, 0x2024, 0x20a7, 0x20c8, 0x20e6, 0x2927, 0x1863, 0x2083	.hword 0x2061, 0x20a2, 0x20c2, 0x18a2, 0x1082, 0x1905, 0x1925, 0x1946, 0x430c, 0x4bee	.hword 0x440e, 0x442e, 0x4bef, 0x4c0f, 0x4c0e, 0x4c0e, 0x542e, 0x542e, 0x540f, 0x5c10	.hword 0x5410, 0x5410, 0x540f, 0x540f, 0x540f, 0x4c10, 0x4c11, 0x4c11, 0x4c2f, 0x4c2f	.hword 0x438e, 0x438e, 0x4b8e, 0x432d, 0x2a49, 0x1145, 0x1104, 0x1925, 0x1905, 0x1905	.hword 0x18e5, 0x18e5, 0x18e5, 0x1905, 0x1906, 0x1905, 0x1904, 0x1905, 0x2105, 0x2105	.hword 0x2105, 0x18e4, 0x18e4, 0x1905, 0x1105, 0x1926, 0x1105, 0x21a8, 0x42ec, 0x4bae	.hword 0x4bee, 0x43ee, 0x4bef, 0x4c0f, 0x4c0f, 0x4c0f, 0x4c0f, 0x4c0f, 0x4c0f, 0x4c0f	.hword 0x4c2f, 0x4c2f, 0x4c2f, 0x4c2f, 0x4c0f, 0x4c0f, 0x4c2f, 0x4c2f, 0x542f, 0x542f	.hword 0x43ae, 0x438d, 0x4b8e, 0x4b6d, 0x32aa, 0x21a7, 0x1945, 0x1925, 0x1905, 0x1905	.hword 0x1905, 0x18e5, 0x18e5, 0x1905, 0x1926, 0x1905, 0x1904, 0x1904, 0x2104, 0x2105	.hword 0x2105, 0x18e4, 0x18e4, 0x1925, 0x1125, 0x1946, 0x1946, 0x2a09, 0x4b4d, 0x53ef	.hword 0x4c0f, 0x4c0f, 0x4bef, 0x4c0f, 0x4c0f, 0x4c0f, 0x4c0f, 0x4c0f, 0x4c0f, 0x4c0f	.hword 0x4c2f, 0x4c2f, 0x4c2f, 0x4c2f, 0x4c0f, 0x4c0f, 0x4c2f, 0x4c2f, 0x542f, 0x542fpix3:	.hword 51, 50, 0x4430	.hword 0x4430, 0x3c2f, 0x3c2f, 0x342e, 0x344e, 0x3c2e, 0x3c2e, 0x440f, 0x43ef, 0x3c0f	.hword 0x33ef, 0x342f, 0x3c0e, 0x43ed, 0x4c0d, 0x4b8c, 0x5b0c, 0x530c, 0x4b0c, 0x430c	.hword 0x32ec, 0x32ec, 0x3b4d, 0x4bef, 0x3bae, 0x3bce, 0x3bee, 0x340e, 0x2bee, 0x2bcd	.hword 0x33ce, 0x3bee, 0x33ce, 0x33cd, 0x2bce, 0x2bed, 0x2bcd, 0x2bcd, 0x2bcd, 0x33cd	.hword 0x33ae, 0x3b8e, 0x338e, 0x2bad, 0x23cd, 0x23cd, 0x2bae, 0x336e, 0x33ad, 0x2bad	.hword 0x2bad, 0x4430, 0x3c2f, 0x3c2f, 0x342e, 0x342e, 0x3c2e, 0x3c2f, 0x3c2f, 0x3c2f	.hword 0x3c2f, 0x3c0f, 0x442f, 0x43ce, 0x432b, 0x3a88, 0x31e6, 0x3925, 0x3145, 0x2125	.hword 0x8e4, 0xe3, 0x9a6, 0x2aeb, 0x43ef, 0x3bee, 0x33ee, 0x33ee, 0x340e, 0x342e	.hword 0x340e, 0x33ee, 0x33ad, 0x33ad, 0x33ce, 0x2bce, 0x2bce, 0x2bcd, 0x33cd, 0x2bcd	.hword 0x33cd, 0x33ae, 0x33ae, 0x33ae, 0x2bad, 0x23cd, 0x23cd, 0x2b8e, 0x336e, 0x33ad	.hword 0x2bad, 0x2bad, 0x3c4f, 0x3c4f, 0x3c2f, 0x3c2f, 0x3c2f, 0x3c2f, 0x3c4f, 0x344f	.hword 0x340e, 0x4450, 0x440e, 0x434c, 0x3a68, 0x39a6, 0x4165, 0x4965, 0x6145, 0x5925	.hword 0x38c3, 0x1882, 0x10e3, 0x2207, 0x3b2b, 0x43cd, 0x440d, 0x3c0e, 0x340e, 0x33ed	.hword 0x2bed, 0x2bce, 0x33ce, 0x33ef, 0x3bad, 0x33ae, 0x33ce, 0x33ce, 0x33ae, 0x33cd	.hword 0x33cd, 0x33ce, 0x33ce, 0x33ae, 0x33ae, 0x2bcd, 0x2bcd, 0x2bcd, 0x33ae, 0x338e	.hword 0x33ae, 0x33ae, 0x2bad, 0x346f, 0x3c6f, 0x3c2f, 0x442f, 0x440f, 0x3c2f, 0x344f	.hword 0x344f, 0x342e, 0x440e, 0x3b0b, 0x31c6, 0x3904, 0x50e4, 0x6925, 0x7166, 0x7104	.hword 0x60c3, 0x4041, 0x3040, 0x3903, 0x4206, 0x4268, 0x3a68, 0x3aa8, 0x3b09, 0x438b	.hword 0x43ed, 0x3bee, 0x33ee, 0x33ee, 0x33ef, 0x3bce, 0x3bce, 0x33ce, 0x33ce, 0x33ae	.hword 0x3bad, 0x33cd, 0x33ee, 0x2bce, 0x33ce, 0x33ce, 0x33cd, 0x2bcd, 0x2bcd, 0x33ae	.hword 0x33ae, 0x33ae, 0x33ae, 0x33ae, 0x348f, 0x346f, 0x3c4f, 0x4430, 0x4430, 0x3c30	.hword 0x3c4f, 0x342f, 0x444f, 0x3b0a, 0x3185, 0x40e3, 0x6924, 0x8145, 0x78e4, 0x7082	.hword 0x5860, 0x5020, 0x4800, 0x4820, 0x48a1, 0x5923, 0x5964, 0x5164, 0x4964, 0x49a5	.hword 0x4a06, 0x4aa9, 0x4b4b, 0x43ad, 0x3bee, 0x33ee, 0x43ce, 0x3bce, 0x33ef, 0x33ce	.hword 0x3bce, 0x3bae, 0x33ad, 0x2bcd, 0x2bee, 0x2bee, 0x33ce, 0x33cd, 0x33cd, 0x33cd	.hword 0x33ad, 0x33ae, 0x33ae, 0x33ae, 0x33ae, 0x348f, 0x3c6f, 0x4450, 0x4430, 0x4430	.hword 0x3c50, 0x3c2f, 0x442e, 0x438c, 0x39e6, 0x40e3, 0x7124, 0x9166, 0x9124, 0x7881	.hword 0x7040, 0x60a1, 0x60a1, 0x60a2, 0x70e3, 0x7924, 0x8144, 0x8144, 0x8144, 0x8164	.hword 0x7944, 0x6923, 0x5944, 0x49c5, 0x4268, 0x430b, 0x438d, 0x43ae, 0x3bce, 0x33ef	.hword 0x33ef, 0x33ce, 0x3bae, 0x3bad, 0x33cd, 0x2bee, 0x2bee, 0x33ce, 0x33ad, 0x33ad	.hword 0x33cd, 0x2bcd, 0x2bce, 0x33ae, 0x33ae, 0x33ae, 0x3c6f, 0x3c4f, 0x3c50, 0x3c50	.hword 0x3c50, 0x3c50, 0x3c2f, 0x43ee, 0x3a88, 0x4144, 0x7144, 0x9985, 0x9904, 0x8081	.hword 0x7040, 0x7081, 0x6081, 0x6060, 0x6061, 0x70c2, 0x8924, 0x9144, 0x9944, 0x9923	.hword 0x9923, 0x9923, 0x9944, 0x8164, 0x6944, 0x5985, 0x49c6, 0x4207, 0x438d, 0x3bad	.hword 0x33ee, 0x2c0f, 0x33ef, 0x3bce, 0x3bad, 0x33cd, 0x2bce, 0x2bce, 0x33ce, 0x3bad	.hword 0x3bad, 0x33ad, 0x2bcd, 0x2bce, 0x33ae, 0x33ae, 0x33ae, 0x444f, 0x4450, 0x3c50	.hword 0x3c70, 0x3c70, 0x3470, 0x442e, 0x53cd, 0x4a47, 0x5943, 0x8964, 0xa165, 0x90c2	.hword 0x8881, 0x7060, 0x6040, 0x6841, 0x6840, 0x6820, 0x6820, 0x7061, 0x80e2, 0x9123	.hword 0x9123, 0x9922, 0xa122, 0xa123, 0xa144, 0x9164, 0x8165, 0x6944, 0x6144, 0x4b4c	.hword 0x3b8c, 0x33ed, 0x2c0e, 0x340e, 0x33ee, 0x33ce, 0x33cd, 0x2bce, 0x2bce, 0x33ce	.hword 0x3bae, 0x3bad, 0x33ad, 0x2bcd, 0x2bce, 0x33ad, 0x33ad, 0x33ad, 0x442f, 0x4450	.hword 0x3c50, 0x3c50, 0x346f, 0x446f, 0x4c4e, 0x536b, 0x49c5, 0x6984, 0x8964, 0x9923	.hword 0x90e2, 0x9103, 0x8902, 0x78c2, 0x7881, 0x7881, 0x7041, 0x6820, 0x6820, 0x6861	.hword 0x70a1, 0x7080, 0x80e2, 0x9102, 0xa123, 0xa123, 0xa124, 0x9964, 0x8944, 0x7903	.hword 0x39e7, 0x430b, 0x3bee, 0x2c0e, 0x2c0e, 0x33ee, 0x33cd, 0x33ce, 0x33ce, 0x2bce	.hword 0x33ce, 0x33ae, 0x3bae, 0x33ae, 0x33ce, 0x2bce, 0x33ae, 0x33ad, 0x33ad, 0x4450	.hword 0x4450, 0x4470, 0x4490, 0x3c2f, 0x3b8c, 0x4b2b, 0x5aa9, 0x5964, 0x7164, 0x8944	.hword 0x9143, 0x9123, 0x9123, 0x9144, 0x9144, 0x8923, 0x8903, 0x88e3, 0x78a2, 0x7061	.hword 0x6040, 0x6040, 0x6040, 0x6860, 0x7881, 0x8081, 0x88a1, 0x90e3, 0x9944, 0x9964	.hword 0x9164, 0x4985, 0x4a89, 0x438c, 0x340e, 0x2c0e, 0x33ee, 0x33cd, 0x33ee, 0x33ce	.hword 0x2bce, 0x33ce, 0x33ae, 0x33ae, 0x33ae, 0x33ae, 0x33ce, 0x33ae, 0x33ad, 0x33ad	.hword 0x4471, 0x3c30, 0x444f, 0x4c4f, 0x3b0b, 0x31e6, 0x4185, 0x5964, 0x6944, 0x7923	.hword 0x78e2, 0x80e2, 0x8902, 0x8903, 0x9124, 0x9965, 0x9984, 0x9964, 0x9964, 0x9144	.hword 0x80c3, 0x6862, 0x6041, 0x6062, 0x6061, 0x6041, 0x6820, 0x7861, 0x88e3, 0x9144	.hword 0x9144, 0x8944, 0x6145, 0x51e6, 0x42ea, 0x3bed, 0x340e, 0x2bcd, 0x33cd, 0x33ee	.hword 0x33ce, 0x33ce, 0x33ce, 0x33ce, 0x33ae, 0x33ae, 0x33ae, 0x33ae, 0x33ae, 0x33ad	.hword 0x33ad, 0x3490, 0x3c70, 0x4c2f, 0x538d, 0x4a28, 0x4924, 0x6944, 0x7924, 0x8944	.hword 0x78c2, 0x6860, 0x6840, 0x7060, 0x7061, 0x7861, 0x8882, 0x9102, 0x9102, 0x9943	.hword 0x9965, 0x8924, 0x70a3, 0x5841, 0x5001, 0x6083, 0x5862, 0x5821, 0x6021, 0x6841	.hword 0x7882, 0x88e3, 0x9165, 0x7945, 0x5965, 0x4248, 0x438c, 0x3c0e, 0x33cd, 0x33ee	.hword 0x33ee, 0x33ee, 0x33ce, 0x33ce, 0x33ae, 0x33ce, 0x33cd, 0x33ad, 0x3bad, 0x33ae	.hword 0x33ae, 0x33ae, 0x34b0, 0x4cb1, 0x53ee, 0x52a9, 0x5165, 0x7124, 0x9186, 0x9945	.hword 0x8904, 0x78a2, 0x6840, 0x6040, 0x6861, 0x6840, 0x7040, 0x7861, 0x8060, 0x88a1	.hword 0x90e2, 0x9944, 0x9965, 0x8924, 0x6082, 0x4800, 0x4841, 0x5082, 0x58a3, 0x6082	.hword 0x6041, 0x6001, 0x7882, 0x8904, 0x8965, 0x6945, 0x41c6, 0x432b, 0x43ee, 0x3bce	.hword 0x33ee, 0x33ee, 0x33ee, 0x33ce, 0x33ce, 0x33ce, 0x33ce, 0x33cd, 0x33ad, 0x3bcd	.hword 0x33ae, 0x33ae, 0x33ae, 0x348f, 0x4c90, 0x4b2b, 0x49a5, 0x6103, 0x8924, 0xa165	.hword 0x9904, 0x8082, 0x7082, 0x6061, 0x6081, 0x68c2, 0x6881, 0x6840, 0x6840, 0x7040	.hword 0x7040, 0x7861, 0x80a2, 0x9124, 0x9165, 0x7924, 0x68c2, 0x4000, 0x4020, 0x4861	.hword 0x5082, 0x5862, 0x5841, 0x6062, 0x6883, 0x8924, 0x6945, 0x4165, 0x42aa, 0x43ce	.hword 0x3bce, 0x3bee, 0x33ee, 0x33ee, 0x33ce, 0x33ce, 0x33ce, 0x33cd, 0x33cd, 0x33cd	.hword 0x33cd, 0x33ae, 0x33ae, 0x33ae, 0x3c6f, 0x43ed, 0x3a47, 0x5144, 0x7965, 0x9945	.hword 0x9924, 0x90e3, 0x7061, 0x6882, 0x6061, 0x60a2, 0x7124, 0x7123, 0x68a1, 0x6880	.hword 0x68a2, 0x6881, 0x6840, 0x7060, 0x80a1, 0x8902, 0x8923, 0x8143, 0x5060, 0x4860	.hword 0x4060, 0x4040, 0x4020, 0x4041, 0x5062, 0x58a3, 0x78a2, 0x6924, 0x4144, 0x3a48	.hword 0x436d, 0x43ce, 0x3bef, 0x33ee, 0x33ee, 0x33ce, 0x33ce, 0x33ce, 0x33cd, 0x33cd	.hword 0x33ed, 0x33cd, 0x33ae, 0x33ae, 0x33ae, 0x4c90, 0x436c, 0x31a5, 0x5124, 0x89a5	.hword 0x8903, 0x7860, 0x7860, 0x6881, 0x6061, 0x5861, 0x6924, 0x9248, 0xa2ca, 0x9a68	.hword 0x9226, 0x79a6, 0x7985, 0x8144, 0x8923, 0x88e2, 0x80c1, 0x80c1, 0x8102, 0x7943	.hword 0x8205, 0x8267, 0x69e6, 0x40e2, 0x3020, 0x3020, 0x3861, 0x6040, 0x6123, 0x4124	.hword 0x3208, 0x434d, 0x43ce, 0x3bef, 0x33ee, 0x33ee, 0x33ce, 0x33ce, 0x33ae, 0x33cd	.hword 0x2bed, 0x33ed, 0x33ed, 0x33ae, 0x33ae, 0x33ae, 0x446f, 0x4b8c, 0x3923, 0x7164	.hword 0x8923, 0x80a2, 0x7000, 0x6841, 0x60a2, 0x4040, 0x38a1, 0x5164, 0x7a48, 0x9aea	.hword 0xab8c, 0xbc0d, 0xbc4b, 0xc48c, 0xc48d, 0xcccd, 0xc40b, 0xc3c9, 0xaac4, 0x9a43	.hword 0x81c1, 0x92c5, 0xc4ed, 0xc50e, 0xa44b, 0x6a87, 0x30a2, 0x1800, 0x3841, 0x38c3	.hword 0x3945, 0x31a7, 0x432c, 0x43ce, 0x340e, 0x2c0e, 0x2c0e, 0x342e, 0x33cd, 0x338c	.hword 0x334b, 0x3bcb, 0x4c8d, 0x340b, 0x33cd, 0x33ed, 0x33ce, 0x446f, 0x4b6c, 0x3102	.hword 0x7164, 0x8103, 0x7061, 0x6841, 0x6062, 0x4820, 0x4061, 0x5103, 0x5124, 0x48c2	.hword 0x50e2, 0x5964, 0x61c4, 0x71e4, 0x8266, 0x9309, 0xb3ec, 0xbc2c, 0xe52e, 0xed2e	.hword 0xdcac, 0xd48c, 0xabca, 0xac0b, 0x8307, 0x6245, 0x4163, 0x28a2, 0x2863, 0x2000	.hword 0x2882, 0x28e4, 0x21a6, 0x434d, 0x3bee, 0x33ee, 0x2bee, 0x2bee, 0x33ee, 0x3bce	.hword 0x3bac, 0x2b09, 0x440c, 0x6d70, 0x550e, 0x33ec, 0x33cc, 0x33cd, 0x4490, 0x436b	.hword 0x28e2, 0x6944, 0x7903, 0x6840, 0x6061, 0x58a2, 0x4020, 0x50c2, 0x69c6, 0x69e6	.hword 0x4923, 0x4923, 0x4103, 0x30c2, 0x40c3, 0x48e3, 0x4924, 0x5164, 0x6a04, 0xb42a	.hword 0xedaf, 0xed8f, 0xcc8c, 0x7244, 0x5183, 0x3901, 0x3902, 0x30e3, 0x28c3, 0x3125	.hword 0x1020, 0x1881, 0x8a2, 0x1164, 0x436d, 0x3c0f, 0x33ee, 0x33ef, 0x33ef, 0x33ce	.hword 0x43ef, 0x3b8c, 0x1a87, 0x3388, 0x75d0, 0x7e30, 0x446d, 0x33eb, 0x2bac, 0x4490	.hword 0x436c, 0x28e2, 0x6944, 0x8145, 0x6861, 0x5881, 0x50a1, 0x4881, 0x71c5, 0xa36c	.hword 0xc4b1, 0xc513, 0xacb2, 0x62aa, 0x3145, 0x3926, 0x3906, 0x30e4, 0x28a2, 0x51c3	.hword 0xa409, 0xe5ce, 0xedef, 0xb44a, 0x5982, 0x4102, 0x38e3, 0x3925, 0x3105, 0x3126	.hword 0x41e9, 0x10c3, 0x2164, 0x923, 0x184, 0x338c, 0x3c0f, 0x33ee, 0x33ef, 0x33cf	.hword 0x3bcf, 0x43ce, 0x334a, 0x1245, 0x1ae4, 0x652c, 0x8eb0, 0x6590, 0x446c, 0x2baa	.hword 0x4490, 0x4bad, 0x2923, 0x5904, 0x8145, 0x7062, 0x5861, 0x50a1, 0x4060, 0x8226	.hword 0xb3cd, 0xe5b4, 0xff1a, 0xce38, 0x526b, 0x20c6, 0x20c6, 0x2907, 0x3147, 0x41e7	.hword 0x944c, 0xcdaf, 0xe64f, 0xe62e, 0xcd6e, 0xa44d, 0x9c2f, 0x628b, 0x3947, 0x28e6	.hword 0x20e6, 0x2967, 0x1124, 0x3269, 0x2289, 0x1268, 0x33ad, 0x33ce, 0x33cf, 0x3bcf	.hword 0x3baf, 0x43cf, 0x332b, 0x1aa7, 0x1a84, 0x22e4, 0x4c68, 0x75cc, 0x8e72, 0x652e	.hword 0x33ca, 0x4491, 0x4c0e, 0x3206, 0x4104, 0x68e4, 0x6862, 0x5841, 0x5081, 0x4860	.hword 0x92a8, 0xbbcc, 0xdd73, 0xf6fa, 0xbdf7, 0x39ca, 0x2108, 0x10a7, 0x18c6, 0x2106	.hword 0x4a08, 0xbd92, 0xde51, 0xde2e, 0xde0d, 0xde30, 0xe675, 0xde79, 0x6acd, 0x20a6	.hword 0x20e7, 0x18c6, 0x1065, 0xc3, 0x3aeb, 0x43ad, 0x2b6c, 0x340f, 0x33ce, 0x3bef	.hword 0x3bef, 0x3bae, 0x3b8c, 0x1a87, 0xa24, 0x22e5, 0x3386, 0x3ba5, 0x43e6, 0x9672	.hword 0x85f1, 0x5ccd, 0x4c91, 0x4c50, 0x434b, 0x39a5, 0x48a2, 0x5862, 0x5862, 0x5081	.hword 0x4020, 0x9aa8, 0xbbcc, 0xdd52, 0xf6f9, 0xbdf7, 0x3189, 0x20e8, 0x2129, 0x18e7	.hword 0x20c6, 0x49e7, 0xd5d3, 0xe651, 0xe62e, 0xee4f, 0xe671, 0xf6f7, 0xde99, 0x524c	.hword 0x1065, 0x2908, 0x2108, 0x18c7, 0xc3, 0x32eb, 0x43ef, 0x33ee, 0x3c50, 0x33ee	.hword 0x3c0f, 0x43ee, 0x3b8c, 0x22c8, 0x1264, 0x1aa4, 0x2b66, 0x3ba7, 0x3345, 0x22c3	.hword 0x9611, 0xaeb4, 0x9613, 0x4c71, 0x4490, 0x4c6f, 0x2a67, 0x28a1, 0x4082, 0x5082	.hword 0x4861, 0x4880, 0xa2c8, 0xbb6b, 0xd4d0, 0xf6d8, 0xce37, 0x39c8, 0x2127, 0x2107	.hword 0x20e6, 0x3146, 0x6248, 0xe634, 0xee31, 0xe5ee, 0xe60e, 0xe651, 0xeef6, 0xe6d9	.hword 0x6b2d, 0x2927, 0x2107, 0x1065, 0x10a6, 0x945, 0x330b, 0x3bce, 0x33ce, 0x3c30	.hword 0x33ce, 0x3c0f, 0x3bad, 0x3329, 0xa03, 0x1283, 0x33a7, 0x3bc7, 0x3ba7, 0x3b86	.hword 0x2ae4, 0xae73, 0xcf98, 0xbef7, 0x4c71, 0x4490, 0x3caf, 0x3bab, 0x1922, 0x3061	.hword 0x48c3, 0x4081, 0x4040, 0x9267, 0xbb6a, 0xc3cc, 0xe5b3, 0xde56, 0x83ce, 0x3146	.hword 0x2105, 0x18a3, 0x49e6, 0xa46e, 0xddf2, 0xe610, 0xddcd, 0xddcd, 0xde2f, 0xde72	.hword 0xeef7, 0xad32, 0x41e7, 0x20e4, 0x2126, 0x884, 0x1a07, 0x3b4c, 0x3bee, 0x3c0f	.hword 0x3c0f, 0x33ee, 0x3bae, 0x334b, 0x9e4, 0x1264, 0x2b46, 0x2ba6, 0x33c6, 0x33a6	.hword 0x3ba6, 0x6d0c, 0xcf77, 0xd7b9, 0xb695, 0x4c91, 0x44b0, 0x3caf, 0x440c, 0x1943	.hword 0x2061, 0x38a2, 0x3861, 0x2800, 0x6963, 0xaae8, 0xc36a, 0xcc4d, 0xedd3, 0xd5b3	.hword 0xa46f, 0x4a26, 0x62c7, 0x9c6d, 0xd5f2, 0xe610, 0xcd0b, 0xb447, 0xb446, 0xd58c	.hword 0xde0f, 0xeed4, 0xd633, 0x9c8e, 0x6b2b, 0x39e6, 0x10c2, 0x330b, 0x43ce, 0x3bee	.hword 0x33ce, 0x33ef, 0x440f, 0x3b8d, 0x1a47, 0x9e4, 0x22a5, 0x3bc7, 0x33c6, 0x2bc5	.hword 0x3c06, 0x54a8, 0x8e4f, 0xcf97, 0xcfb8, 0xae74, 0x446f, 0x44b0, 0x44af, 0x43ed	.hword 0x2124, 0x2841, 0x38a3, 0x3082, 0x2000, 0x40a1, 0x9aa8, 0xc38b, 0xc369, 0xd48d	.hword 0xed91, 0xdd71, 0xc50f, 0xd54f, 0xe5f1, 0xf651, 0xedce, 0xdd4b, 0xdd2b, 0xe54b	.hword 0xe5ac, 0xedce, 0xedf0, 0xe611, 0xde13, 0xa4af, 0x4a66, 0x2163, 0x338d, 0x3bce	.hword 0x3bef, 0x3c0f, 0x3bef, 0x440f, 0x334c, 0x9c5, 0x183, 0x1a84, 0x33a6, 0x33c4	.hword 0x3404, 0x4ce6, 0x760b, 0xa791, 0xc7b6, 0xb756, 0x8df1, 0x446f, 0x4cb0, 0x43ed	.hword 0x32a9, 0x20c3, 0x3083, 0x38a3, 0x2882, 0x1820, 0x2020, 0x61a4, 0x9ae8, 0xb349	.hword 0xbba9, 0xcc0b, 0xd48d, 0xed0e, 0xe4ed, 0xdccd, 0xe4ec, 0xe4ec, 0xed0c, 0xed2c	.hword 0xed2c, 0xed4d, 0xed6e, 0xdd2e, 0xd52f, 0xc530, 0x7b6a, 0x2983, 0x21a4, 0x3bcf	.hword 0x3bef, 0x3c0f, 0x3bef, 0x3bce, 0x43ef, 0x43ad, 0x2b0a, 0x162, 0xa02, 0x2324	.hword 0x33e4, 0x4ce6, 0x760a, 0x8f0d, 0xa78f, 0xaf54, 0x9692, 0x6d2e, 0x44d0, 0x4c8f	.hword 0x22a9, 0x1144, 0x1882, 0x30c4, 0x30c3, 0x1882, 0x10a2, 0x860, 0x3142, 0x6a66	.hword 0x9b69, 0xb3ca, 0xb369, 0xbbca, 0xc349, 0xc369, 0xc3a9, 0xcbea, 0xc3ea, 0xc3ca	.hword 0xc3ca, 0xbba9, 0xc3ea, 0xbbca, 0xab8a, 0x9309, 0x6a87, 0x3164, 0x1123, 0x32a9	.hword 0x3bcf, 0x3c0f, 0x3bce, 0x336c, 0x3bcd, 0x4c0e, 0x43cd, 0x336a, 0x1a2, 0xa42	.hword 0x3384, 0x5d08, 0x7e2b, 0x972e, 0xa790, 0x8f0e, 0x8671, 0x6d8e, 0x444b, 0x346e	.hword 0x33ed, 0x1207, 0x904, 0x10a3, 0x2104, 0x1903, 0x1103, 0x21c5, 0x3267, 0x5bec	.hword 0x742d, 0x7c0b, 0x83aa, 0x7286, 0x6a25, 0x8266, 0x8245, 0x8266, 0x7a65, 0x7a45	.hword 0x7a66, 0x82a7, 0x82a7, 0x69e4, 0x5983, 0x4923, 0x38c2, 0x28c3, 0x2165, 0x2a89	.hword 0x4bef, 0x3bed, 0x33ac, 0x22e9, 0x1247, 0x22e9, 0x3b6b, 0x22c8, 0x1244, 0xa62	.hword 0x2b64, 0x5d09, 0x864d, 0x8e8e, 0x9710, 0xa772, 0x868f, 0x5d2e, 0x448c, 0x33ca	.hword 0x3cb0, 0x4490, 0x3b6d, 0x432c, 0x3aeb, 0x3b2a, 0x32c9, 0x2a87, 0x32e9, 0x5c6f	.hword 0x8615, 0x75b2, 0x5c8d, 0x4b49, 0x29a3, 0x2922, 0x2141, 0x2141, 0x2120, 0x1901	.hword 0x2101, 0x2922, 0x2921, 0x20c0, 0x2922, 0x20c1, 0x1881, 0x1061, 0x1905, 0x3acb	.hword 0x43ce, 0x3bef, 0x3bcc, 0x2b09, 0x1246, 0x9c4, 0x1204, 0x1a86, 0x1284, 0x12a4	.hword 0x2ba5, 0x5d2a, 0x8e8e, 0x8e8e, 0x6509, 0x5cea, 0x75f0, 0x6d6f, 0x3c4c, 0x33ec	.hword 0x2bac, 0x3cb0, 0x4c90, 0x4c30, 0x5c71, 0x544f, 0x4c8f, 0x33ab, 0x1225, 0x334a	.hword 0x4c6f, 0x5d51, 0x3cae, 0x3c4c, 0x338a, 0x1a25, 0x3267, 0x43ea, 0x440b, 0x4c2c	.hword 0x4beb, 0x4bab, 0x4b8a, 0x42e8, 0x2a25, 0x3246, 0x3205, 0x2185, 0x8a2, 0x905	.hword 0x3b0c, 0x440f, 0x2b8d, 0x22e7, 0x1a65, 0x2ae7, 0x3b28, 0x2ac7, 0x22a5, 0x22e5	.hword 0x33c7, 0x4cc9, 0x866e, 0xa751, 0x7dec, 0x2302, 0x1262, 0x43eb, 0x3bec, 0x340d	.hword 0x2bcd, 0x2bad, 0x4c91, 0x4470, 0x4450, 0x4490, 0x3c4f, 0x444f, 0x43ed, 0x164	.hword 0x2288, 0x3b8a, 0x3bcb, 0x2b8a, 0x336a, 0x1a87, 0x9c4, 0x32e9, 0x3c8d, 0x5d2f	.hword 0x6d51, 0x6d71, 0x550f, 0x4ccf, 0x444d, 0x1246, 0x2aa8, 0x3289, 0x21c6, 0x8c3	.hword 0x10e3, 0x3248, 0x432b, 0x2288, 0x1a43, 0x3346, 0x3b87, 0x3366, 0x3be8, 0x3386	.hword 0x2303, 0x3bc4, 0x864c, 0x9eed, 0xaf71, 0x862e, 0x3be9, 0x2329, 0x2bad, 0x2bce	.hword 0x33cd, 0x33cd, 0x33cd, 0x4470, 0x4490, 0x4470, 0x44b0, 0x3c90, 0x444f, 0x3b8c	.hword 0x123, 0x1984, 0x2a67, 0x32e8, 0x2ac7, 0x2aa7, 0x11e4, 0x11c4, 0x436b, 0x446d	.hword 0x64ef, 0x6d31, 0x6d51, 0x5ccf, 0x4c4d, 0x3b8b, 0x9c5, 0x2227, 0x21e7, 0x1924	.hword 0x882, 0x1062, 0x2145, 0x3248, 0x2a68, 0x32e7, 0x3307, 0x43c8, 0x43e8, 0x2324	.hword 0x1b02, 0x4425, 0x75aa, 0x96ad, 0xaf90, 0xaf51, 0x6d6d, 0x33a9, 0x2b8b, 0x3bee	.hword 0x33ee, 0x33cd, 0x33cd, 0x33cd, 0x3c90, 0x44b0, 0x3c6f, 0x3c90, 0x3c8f, 0x442e	.hword 0x32c9, 0x10e2, 0x1060, 0x18c1, 0x1902, 0x1922, 0x1943, 0x922, 0x963, 0x32a8	.hword 0x2b29, 0x3b49, 0x3b29, 0x3b4a, 0x3309, 0x2ae8, 0x2288, 0x943, 0x21a5, 0x1945	.hword 0x10a3, 0x20a3, 0x20a3, 0x1883, 0x2966, 0x3a48, 0x32c8, 0x2aa7, 0x3307, 0x3305	.hword 0x22e3, 0x3bc4, 0x758a, 0xaf70, 0xa76f, 0xa730, 0x7dcd, 0x4409, 0x2349, 0x2b8c	.hword 0x33cd, 0x33ce, 0x33cd, 0x33cd, 0x33cd, 0x4490, 0x44b1, 0x3c6f, 0x3c8f, 0x448f	.hword 0x43ed, 0x2a67, 0x3144, 0x4144, 0x38c2, 0x30a1, 0x28a0, 0x1860, 0x1902, 0x2206	.hword 0x2ac8, 0x3309, 0x32e8, 0x32c8, 0x3309, 0x3b2a, 0x32e9, 0x2a68, 0x1984, 0x1944	.hword 0x1104, 0x18a3, 0x3126, 0x4146, 0x2063, 0x18a3, 0x2986, 0x3248, 0x3ac9, 0x2a66	.hword 0x1202, 0x43a6, 0x85cc, 0x9eee, 0xaf90, 0x9f2f, 0x6d8c, 0x3be8, 0x2b69, 0x338c	.hword 0x33ad, 0x33cd, 0x33ee, 0x33cd, 0x33cd, 0x33cd, 0x4470, 0x4c90, 0x444f, 0x4490	.hword 0x4c90, 0x43cd, 0x2a06, 0x49e7, 0x82ea, 0x7a89, 0x82ca, 0x7288, 0x3143, 0x1922	.hword 0x2a26, 0x22a7, 0x2ac8, 0x2ac8, 0x2ac8, 0x2b09, 0x2ae9, 0x2288, 0x2206, 0x1985	.hword 0x1103, 0x8e3, 0x10a3, 0x3145, 0x4187, 0x20a3, 0x842, 0x10c3, 0x29a7, 0x428a	.hword 0x3a88, 0x2a45, 0x5c2a, 0xaef2, 0xb751, 0x8e6d, 0x650a, 0x3387, 0x22e8, 0x338c	.hword 0x3bef, 0x3bce, 0x33ce, 0x33cd, 0x33ce, 0x33ae, 0x33ae, 0x4450, 0x4470, 0x444f	.hword 0x4c90, 0x446f, 0x438c, 0x1984, 0x4206, 0x5a27, 0x6227, 0x7b09, 0x6ae9, 0x2922	.hword 0xa0, 0x11c4, 0x1205, 0x9a4, 0x9c4, 0xa05, 0xa45, 0x1205, 0x984, 0x1164	.hword 0x2185, 0x2a07, 0x2185, 0x8c3, 0x10c3, 0x2925, 0x18e4, 0x8c3, 0x903, 0x1905	.hword 0x2966, 0x4a8a, 0x4aea, 0x4b48, 0x7d2d, 0x8dce, 0x5469, 0x2b26, 0x2308, 0x2b6c	.hword 0x3bcf, 0x33af, 0x33cf, 0x33ce, 0x2b8d, 0x33ae, 0x33ae, 0x33ae, 0x4470, 0x4450	.hword 0x4450, 0x4470, 0x442f, 0x3bad, 0x144, 0x29e6, 0x4226, 0x52a8, 0x5ae8, 0x3a45	.hword 0x1101, 0x942, 0x32a8, 0x432a, 0x4b2b, 0x4b6b, 0x438b, 0x3b6a, 0x2aa8, 0x21a5	.hword 0x1924, 0x2945, 0x4248, 0x2a07, 0x1124, 0x8e2, 0x1924, 0x2185, 0x19a6, 0x11a5	.hword 0x18e4, 0x18c4, 0x31c8, 0x428a, 0x3a88, 0x3ac7, 0x3307, 0x2aa6, 0x3329, 0x3bad	.hword 0x3bef, 0x3bcf, 0x33af, 0x33cf, 0x33ee, 0x33ce, 0x33ae, 0x33ae, 0x33ae, 0x4470	.hword 0x4470, 0x3c70, 0x3c70, 0x3c50, 0x440e, 0x9a5, 0x2247, 0x4b4a, 0x748f, 0x6c4d	.hword 0x2a65, 0xe0, 0xe1, 0x21c5, 0x3207, 0x39a6, 0x29a5, 0x19a4, 0x963, 0x1123	.hword 0x1082, 0x1841, 0x30c3, 0x1882, 0x18e3, 0x8e2, 0x1123, 0x21c6, 0x3288, 0x3ac9	.hword 0x2288, 0x10c2, 0x8a3, 0x883, 0x2987, 0x4aeb, 0x3248, 0x11a4, 0x32e9, 0x3b8d	.hword 0x3bcf, 0x33af, 0x2bae, 0x33ce, 0x33ce, 0x2bad, 0x33ce, 0x33ae, 0x33ae, 0x33ae	.hword 0x4470, 0x3c4f, 0x4490, 0x344f, 0x4470, 0x3bce, 0x9e6, 0x2247, 0x3b09, 0x6cae	.hword 0x6cef, 0x53eb, 0x942, 0xa0, 0x3165, 0x3145, 0x4925, 0x3965, 0x18e3, 0x2184	.hword 0x1082, 0x4145, 0x5987, 0x5126, 0x38c4, 0x1041, 0x10e2, 0x29e6, 0x3268, 0x3aa9	.hword 0x32ca, 0x2aa9, 0x1143, 0x3248, 0x1986, 0x8e4, 0x21c7, 0x19e7, 0x11c7, 0x330c	.hword 0x3baf, 0x3baf, 0x33cf, 0x33ce, 0x33cd, 0x33cd, 0x33cd, 0x33ae, 0x33ad, 0x33ad	.hword 0x33ad, 0x4470, 0x3c4f, 0x4490, 0x3c50, 0x4450, 0x43ee, 0x1a48, 0x11c6, 0x2aa8	.hword 0x434a, 0x4bab, 0x53ec, 0x2a46, 0x1922, 0x3964, 0x51a6, 0x6187, 0x4966, 0x2924	.hword 0x4207, 0x3144, 0x5166, 0x69a8, 0x6187, 0x4925, 0x1861, 0x10c2, 0x29e6, 0x3aa9	.hword 0x3ac9, 0x2a88, 0x1a07, 0x984, 0x3b0b, 0x432c, 0x2228, 0x986, 0x165, 0x1208	.hword 0x438e, 0x3baf, 0x33af, 0x33ce, 0x33ed, 0x33ec, 0x33cd, 0x33cd, 0x33ae, 0x33ad	.hword 0x33ad, 0x33ad, 0x4c70, 0x3c4f, 0x3c90, 0x3c70, 0x4450, 0x4c2f, 0x32eb, 0x985	.hword 0x2a88, 0x3b09, 0x3b29, 0x4349, 0x2205, 0x2163, 0x3984, 0x4965, 0x59a7, 0x4145	.hword 0x3185, 0x52aa, 0x41c7, 0x3925, 0x4925, 0x5166, 0x4165, 0x1881, 0x881, 0x1964	.hword 0x19c5, 0x19c5, 0x11a5, 0x964, 0x22ea, 0x43ce, 0x4c0f, 0x334c, 0x22a9, 0x22a9	.hword 0x334c, 0x43ef, 0x3bae, 0x33ce, 0x33cd, 0x33ed, 0x33ec, 0x33cd, 0x33ce, 0x33ae	.hword 0x33ad, 0x33ad, 0x33ad, 0x444f, 0x444f, 0x3c70, 0x3c70, 0x444f, 0x4c50, 0x43ad	.hword 0x1a48, 0x9a5, 0x11c5, 0x11c4, 0x11e4, 0x11a3, 0x3ac8, 0x530a, 0x4206, 0x3945	.hword 0x2104, 0x29c6, 0x4b0b, 0x3a48, 0x2104, 0x3145, 0x41e7, 0x4227, 0x2164, 0xa1	.hword 0xa1, 0xa1, 0x103, 0x1207, 0x2aca, 0x33ce, 0x3bef, 0x3bce, 0x33ad, 0x3bcd	.hword 0x440e, 0x3bee, 0x338d, 0x33ce, 0x33ce, 0x33ed, 0x33ed, 0x33cd, 0x33cd, 0x33ae	.hword 0x33ae, 0x33ad, 0x33ad, 0x33ad, 0x442f, 0x4470, 0x346f, 0x3c6f, 0x3c4f, 0x444f	.hword 0x442f, 0x336c, 0x1a68, 0x1a27, 0x2267, 0x1a46, 0x9c4, 0x3b49, 0x53ab, 0x3ac8	.hword 0x29a6, 0x1124, 0x2206, 0x3aca, 0x3228, 0x1924, 0x29e6, 0x3aa9, 0x3268, 0x19c5	.hword 0x922, 0x943, 0x9a5, 0x1227, 0x332b, 0x43ce, 0x2bcf, 0x33ef, 0x33ee, 0x3bee	.hword 0x3c0e, 0x3bee, 0x33ad, 0x33cd, 0x33cd, 0x33cd, 0x33ed, 0x33ee, 0x33ce, 0x33ae	.hword 0x33ae, 0x33ae, 0x2bae, 0x2bae, 0x2bae, 0x3c4f, 0x3c70, 0x344f, 0x344f, 0x3c4f	.hword 0x444f, 0x444f, 0x444f, 0x43ed, 0x3b4b, 0x430a, 0x2227, 0x142, 0x22a7, 0x3329	.hword 0x2245, 0x19a6, 0xc2, 0x924, 0x1144, 0x904, 0x82, 0x19a5, 0x2247, 0x2267	.hword 0x1a06, 0x1144, 0x21e6, 0x3aea, 0x3b6c, 0x43ce, 0x3bad, 0x33ef, 0x340f, 0x340e	.hword 0x3c0e, 0x3c0e, 0x33ae, 0x33ad, 0x3c0f, 0x33cd, 0x2bcd, 0x2bcd, 0x33ce, 0x33ce	.hword 0x33ae, 0x33ae, 0x33ae, 0x2bae, 0x2bae, 0x2bae, 0x4450, 0x3c50, 0x3c70, 0x3c4f	.hword 0x3c4f, 0x444f, 0x442f, 0x444f, 0x3bad, 0x32a9, 0x21c7, 0x1124, 0x1984, 0x538c	.hword 0x4b8b, 0x2aa7, 0x21e7, 0xe3, 0x1124, 0x1904, 0x1904, 0x8e3, 0x2207, 0x2288	.hword 0x2aa8, 0x2227, 0x1103, 0x1944, 0x2a48, 0x332c, 0x43ef, 0x3bef, 0x33ee, 0x33cd	.hword 0x2bad, 0x33cd, 0x3bce, 0x3bce, 0x33ce, 0x33ce, 0x33cd, 0x2bcd, 0x2bcd, 0x33ce	.hword 0x33cf, 0x33af, 0x33ae, 0x33ad, 0x33ae, 0x33ae, 0x33ae, 0x4471, 0x340f, 0x3c70	.hword 0x3c4f, 0x442f, 0x4c50, 0x3c0e, 0x3bee, 0x1248, 0x1165, 0x10e4, 0x882, 0x10e3	.hword 0x3247, 0x21e5, 0x21e5, 0x21a6, 0x8a3, 0x2145, 0x20e4, 0x20c4, 0x862, 0x1185	.hword 0x9c5, 0x9a5, 0x19c6, 0x10c3, 0x8a2, 0x925, 0x1208, 0x2b4c, 0x33ce, 0x33cd	.hword 0x33cd, 0x3bed, 0x3bee, 0x33ae, 0x33ae, 0x33cf, 0x33ae, 0x2bcd, 0x2bcd, 0x2bcd	.hword 0x33ce, 0x33cf, 0x33af, 0x33ad, 0x33ac, 0x33ae, 0x33ae, 0x33ae, 0x3c50, 0x3c4f	.hword 0x3c4f, 0x3c2f, 0x342f, 0x3c2f, 0x3c0f, 0x3b8d, 0x11c7, 0x1125, 0x10e4, 0x1105	.hword 0x1104, 0x904, 0x1104, 0x1104, 0x1104, 0x1105, 0x1125, 0x1125, 0x1105, 0x10e4	.hword 0x1104, 0x1104, 0x10e4, 0x1904, 0x10c3, 0x1905, 0x1124, 0x965, 0x2acb, 0x33ad	.hword 0x33ee, 0x33ee, 0x33ce, 0x33cd, 0x33cd, 0x33cd, 0x33cd, 0x33cd, 0x33ce, 0x33ce	.hword 0x33ce, 0x33ce, 0x33ad, 0x33ad, 0x33ad, 0x2bad, 0x2bad, 0x2bad, 0x2bad, 0x3c50	.hword 0x3c4f, 0x3c4f, 0x3c2f, 0x342f, 0x3c2f, 0x3c0f, 0x3b8d, 0x11c7, 0x1126, 0x1105	.hword 0x1105, 0x1104, 0x1104, 0x1124, 0x1124, 0x1105, 0x1125, 0x1925, 0x1925, 0x1105	.hword 0x1105, 0x1104, 0x1905, 0x1904, 0x1904, 0x18e4, 0x1925, 0x1145, 0x1186, 0x2aeb	.hword 0x3bce, 0x33ee, 0x33ee, 0x33ce, 0x33cd, 0x33cd, 0x33cd, 0x33cd, 0x33cd, 0x33ce	.hword 0x33ce, 0x33ce, 0x33ce, 0x33ad, 0x33ad, 0x33ad, 0x2bad, 0x2bad, 0x2bad, 0x2bad// PIXELS END HERE			